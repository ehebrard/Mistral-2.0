predicate all_different_int(array [int] of var int: x);
var bool: BOOL____00001 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00002 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00004 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00005 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00007 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00008 :: is_defined_var :: var_is_introduced;
array [1..5] of var 1..5: animal :: output_array([0..4]);
array [1..5] of var 1..5: colour :: output_array([0..4]);
array [1..5] of var 1..5: drink :: output_array([0..4]);
array [1..5] of var 1..5: nation :: output_array([0..4]);
array [1..5] of var 1..5: smoke :: output_array([0..4]);
constraint all_different_int(animal);
constraint all_different_int(colour);
constraint all_different_int(drink);
constraint all_different_int(nation);
constraint all_different_int(smoke);
constraint array_bool_or([BOOL____00001, BOOL____00002], true);
constraint array_bool_or([BOOL____00004, BOOL____00005], true);
constraint array_bool_or([BOOL____00007, BOOL____00008], true);
constraint int_eq(3, drink[3]);
constraint int_eq(animal[1], nation[2]);
constraint int_eq(animal[5], smoke[1]);
constraint int_eq(colour[1], nation[1]);
constraint int_eq(colour[2], drink[1]);
constraint int_eq(colour[4], smoke[2]);
constraint int_eq(drink[2], nation[3]);
constraint int_eq(drink[4], smoke[4]);
constraint int_eq(nation[4], 1);
constraint int_eq(smoke[5], nation[5]);
constraint int_lin_eq([-1, 1], [colour[2], colour[3]], -1);
constraint int_lin_eq_reif([-1, 1], [animal[2], smoke[3]], -1, BOOL____00002) :: defines_var(BOOL____00002);
constraint int_lin_eq_reif([-1, 1], [animal[3], smoke[2]], -1, BOOL____00005) :: defines_var(BOOL____00005);
constraint int_lin_eq_reif([-1, 1], [colour[5], nation[4]], -1, BOOL____00008) :: defines_var(BOOL____00008);
constraint int_lin_eq_reif([1, -1], [animal[2], smoke[3]], -1, BOOL____00001) :: defines_var(BOOL____00001);
constraint int_lin_eq_reif([1, -1], [animal[3], smoke[2]], -1, BOOL____00004) :: defines_var(BOOL____00004);
constraint int_lin_eq_reif([1, -1], [colour[5], nation[4]], -1, BOOL____00007) :: defines_var(BOOL____00007);
solve satisfy;
