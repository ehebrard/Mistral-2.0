array [1..20] of int: ItemHeight = [10, 10, 10, 10, 9, 9, 8, 7, 7, 6, 5, 4, 4, 4, 4, 3, 3, 2, 2, 1];
array [1..20] of int: ItemWidth = [2, 10, 9, 2, 3, 4, 2, 1, 1, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1];
var 0..20: INT____00021 :: is_defined_var :: var_is_introduced;
array [1..20] of var 0..1: bin :: output_array([1..20]);
array [1..400] of var 0..1: item :: output_array([1..20, 1..20]);
array [1..210] of var 0..1: x____00001;
array [1..210] of var 0..1: x____00002;
array [1..210] of var 0..1: x____00003;
array [1..210] of var 0..1: x____00004;
array [1..210] of var 0..1: x____00005;
array [1..210] of var 0..1: x____00006;
array [1..210] of var 0..1: x____00007;
array [1..210] of var 0..1: x____00008;
array [1..210] of var 0..1: x____00009;
array [1..210] of var 0..1: x____00010;
array [1..210] of var 0..1: x____00011;
array [1..210] of var 0..1: x____00012;
array [1..210] of var 0..1: x____00013;
array [1..210] of var 0..1: x____00014;
array [1..210] of var 0..1: x____00015;
array [1..210] of var 0..1: x____00016;
array [1..210] of var 0..1: x____00017;
array [1..210] of var 0..1: x____00018;
array [1..210] of var 0..1: x____00019;
array [1..210] of var 0..1: x____00020;
constraint int_lin_eq([1, -1], [item[1], x____00001[1]], 0);
constraint int_lin_eq([1, -1], [item[21], x____00002[1]], 0);
constraint int_lin_eq([1, -1], [item[41], x____00003[1]], 0);
constraint int_lin_eq([1, -1], [item[61], x____00004[1]], 0);
constraint int_lin_eq([1, -1], [item[81], x____00005[1]], 0);
constraint int_lin_eq([1, -1], [item[101], x____00006[1]], 0);
constraint int_lin_eq([1, -1], [item[121], x____00007[1]], 0);
constraint int_lin_eq([1, -1], [item[141], x____00008[1]], 0);
constraint int_lin_eq([1, -1], [item[161], x____00009[1]], 0);
constraint int_lin_eq([1, -1], [item[181], x____00010[1]], 0);
constraint int_lin_eq([1, -1], [item[201], x____00011[1]], 0);
constraint int_lin_eq([1, -1], [item[221], x____00012[1]], 0);
constraint int_lin_eq([1, -1], [item[241], x____00013[1]], 0);
constraint int_lin_eq([1, -1], [item[261], x____00014[1]], 0);
constraint int_lin_eq([1, -1], [item[281], x____00015[1]], 0);
constraint int_lin_eq([1, -1], [item[301], x____00016[1]], 0);
constraint int_lin_eq([1, -1], [item[321], x____00017[1]], 0);
constraint int_lin_eq([1, -1], [item[341], x____00018[1]], 0);
constraint int_lin_eq([1, -1], [item[361], x____00019[1]], 0);
constraint int_lin_eq([1, -1], [item[381], x____00020[1]], 0);
constraint int_lin_eq([1, -1, -1], [item[2], x____00001[2], x____00001[21]], 0);
constraint int_lin_eq([1, -1, -1], [item[22], x____00002[2], x____00002[21]], 0);
constraint int_lin_eq([1, -1, -1], [item[42], x____00003[2], x____00003[21]], 0);
constraint int_lin_eq([1, -1, -1], [item[62], x____00004[2], x____00004[21]], 0);
constraint int_lin_eq([1, -1, -1], [item[82], x____00005[2], x____00005[21]], 0);
constraint int_lin_eq([1, -1, -1], [item[102], x____00006[2], x____00006[21]], 0);
constraint int_lin_eq([1, -1, -1], [item[122], x____00007[2], x____00007[21]], 0);
constraint int_lin_eq([1, -1, -1], [item[142], x____00008[2], x____00008[21]], 0);
constraint int_lin_eq([1, -1, -1], [item[162], x____00009[2], x____00009[21]], 0);
constraint int_lin_eq([1, -1, -1], [item[182], x____00010[2], x____00010[21]], 0);
constraint int_lin_eq([1, -1, -1], [item[202], x____00011[2], x____00011[21]], 0);
constraint int_lin_eq([1, -1, -1], [item[222], x____00012[2], x____00012[21]], 0);
constraint int_lin_eq([1, -1, -1], [item[242], x____00013[2], x____00013[21]], 0);
constraint int_lin_eq([1, -1, -1], [item[262], x____00014[2], x____00014[21]], 0);
constraint int_lin_eq([1, -1, -1], [item[282], x____00015[2], x____00015[21]], 0);
constraint int_lin_eq([1, -1, -1], [item[302], x____00016[2], x____00016[21]], 0);
constraint int_lin_eq([1, -1, -1], [item[322], x____00017[2], x____00017[21]], 0);
constraint int_lin_eq([1, -1, -1], [item[342], x____00018[2], x____00018[21]], 0);
constraint int_lin_eq([1, -1, -1], [item[362], x____00019[2], x____00019[21]], 0);
constraint int_lin_eq([1, -1, -1], [item[382], x____00020[2], x____00020[21]], 0);
constraint int_lin_eq([1, -1, -1, -1], [item[3], x____00001[3], x____00001[22], x____00001[40]], 0);
constraint int_lin_eq([1, -1, -1, -1], [item[23], x____00002[3], x____00002[22], x____00002[40]], 0);
constraint int_lin_eq([1, -1, -1, -1], [item[43], x____00003[3], x____00003[22], x____00003[40]], 0);
constraint int_lin_eq([1, -1, -1, -1], [item[63], x____00004[3], x____00004[22], x____00004[40]], 0);
constraint int_lin_eq([1, -1, -1, -1], [item[83], x____00005[3], x____00005[22], x____00005[40]], 0);
constraint int_lin_eq([1, -1, -1, -1], [item[103], x____00006[3], x____00006[22], x____00006[40]], 0);
constraint int_lin_eq([1, -1, -1, -1], [item[123], x____00007[3], x____00007[22], x____00007[40]], 0);
constraint int_lin_eq([1, -1, -1, -1], [item[143], x____00008[3], x____00008[22], x____00008[40]], 0);
constraint int_lin_eq([1, -1, -1, -1], [item[163], x____00009[3], x____00009[22], x____00009[40]], 0);
constraint int_lin_eq([1, -1, -1, -1], [item[183], x____00010[3], x____00010[22], x____00010[40]], 0);
constraint int_lin_eq([1, -1, -1, -1], [item[203], x____00011[3], x____00011[22], x____00011[40]], 0);
constraint int_lin_eq([1, -1, -1, -1], [item[223], x____00012[3], x____00012[22], x____00012[40]], 0);
constraint int_lin_eq([1, -1, -1, -1], [item[243], x____00013[3], x____00013[22], x____00013[40]], 0);
constraint int_lin_eq([1, -1, -1, -1], [item[263], x____00014[3], x____00014[22], x____00014[40]], 0);
constraint int_lin_eq([1, -1, -1, -1], [item[283], x____00015[3], x____00015[22], x____00015[40]], 0);
constraint int_lin_eq([1, -1, -1, -1], [item[303], x____00016[3], x____00016[22], x____00016[40]], 0);
constraint int_lin_eq([1, -1, -1, -1], [item[323], x____00017[3], x____00017[22], x____00017[40]], 0);
constraint int_lin_eq([1, -1, -1, -1], [item[343], x____00018[3], x____00018[22], x____00018[40]], 0);
constraint int_lin_eq([1, -1, -1, -1], [item[363], x____00019[3], x____00019[22], x____00019[40]], 0);
constraint int_lin_eq([1, -1, -1, -1], [item[383], x____00020[3], x____00020[22], x____00020[40]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1], [item[4], x____00001[4], x____00001[23], x____00001[41], x____00001[58]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1], [item[24], x____00002[4], x____00002[23], x____00002[41], x____00002[58]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1], [item[44], x____00003[4], x____00003[23], x____00003[41], x____00003[58]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1], [item[64], x____00004[4], x____00004[23], x____00004[41], x____00004[58]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1], [item[84], x____00005[4], x____00005[23], x____00005[41], x____00005[58]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1], [item[104], x____00006[4], x____00006[23], x____00006[41], x____00006[58]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1], [item[124], x____00007[4], x____00007[23], x____00007[41], x____00007[58]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1], [item[144], x____00008[4], x____00008[23], x____00008[41], x____00008[58]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1], [item[164], x____00009[4], x____00009[23], x____00009[41], x____00009[58]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1], [item[184], x____00010[4], x____00010[23], x____00010[41], x____00010[58]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1], [item[204], x____00011[4], x____00011[23], x____00011[41], x____00011[58]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1], [item[224], x____00012[4], x____00012[23], x____00012[41], x____00012[58]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1], [item[244], x____00013[4], x____00013[23], x____00013[41], x____00013[58]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1], [item[264], x____00014[4], x____00014[23], x____00014[41], x____00014[58]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1], [item[284], x____00015[4], x____00015[23], x____00015[41], x____00015[58]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1], [item[304], x____00016[4], x____00016[23], x____00016[41], x____00016[58]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1], [item[324], x____00017[4], x____00017[23], x____00017[41], x____00017[58]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1], [item[344], x____00018[4], x____00018[23], x____00018[41], x____00018[58]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1], [item[364], x____00019[4], x____00019[23], x____00019[41], x____00019[58]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1], [item[384], x____00020[4], x____00020[23], x____00020[41], x____00020[58]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1], [item[5], x____00001[5], x____00001[24], x____00001[42], x____00001[59], x____00001[75]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1], [item[25], x____00002[5], x____00002[24], x____00002[42], x____00002[59], x____00002[75]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1], [item[45], x____00003[5], x____00003[24], x____00003[42], x____00003[59], x____00003[75]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1], [item[65], x____00004[5], x____00004[24], x____00004[42], x____00004[59], x____00004[75]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1], [item[85], x____00005[5], x____00005[24], x____00005[42], x____00005[59], x____00005[75]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1], [item[105], x____00006[5], x____00006[24], x____00006[42], x____00006[59], x____00006[75]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1], [item[125], x____00007[5], x____00007[24], x____00007[42], x____00007[59], x____00007[75]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1], [item[145], x____00008[5], x____00008[24], x____00008[42], x____00008[59], x____00008[75]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1], [item[165], x____00009[5], x____00009[24], x____00009[42], x____00009[59], x____00009[75]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1], [item[185], x____00010[5], x____00010[24], x____00010[42], x____00010[59], x____00010[75]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1], [item[205], x____00011[5], x____00011[24], x____00011[42], x____00011[59], x____00011[75]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1], [item[225], x____00012[5], x____00012[24], x____00012[42], x____00012[59], x____00012[75]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1], [item[245], x____00013[5], x____00013[24], x____00013[42], x____00013[59], x____00013[75]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1], [item[265], x____00014[5], x____00014[24], x____00014[42], x____00014[59], x____00014[75]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1], [item[285], x____00015[5], x____00015[24], x____00015[42], x____00015[59], x____00015[75]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1], [item[305], x____00016[5], x____00016[24], x____00016[42], x____00016[59], x____00016[75]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1], [item[325], x____00017[5], x____00017[24], x____00017[42], x____00017[59], x____00017[75]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1], [item[345], x____00018[5], x____00018[24], x____00018[42], x____00018[59], x____00018[75]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1], [item[365], x____00019[5], x____00019[24], x____00019[42], x____00019[59], x____00019[75]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1], [item[385], x____00020[5], x____00020[24], x____00020[42], x____00020[59], x____00020[75]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1], [item[6], x____00001[6], x____00001[25], x____00001[43], x____00001[60], x____00001[76], x____00001[91]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1], [item[26], x____00002[6], x____00002[25], x____00002[43], x____00002[60], x____00002[76], x____00002[91]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1], [item[46], x____00003[6], x____00003[25], x____00003[43], x____00003[60], x____00003[76], x____00003[91]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1], [item[66], x____00004[6], x____00004[25], x____00004[43], x____00004[60], x____00004[76], x____00004[91]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1], [item[86], x____00005[6], x____00005[25], x____00005[43], x____00005[60], x____00005[76], x____00005[91]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1], [item[106], x____00006[6], x____00006[25], x____00006[43], x____00006[60], x____00006[76], x____00006[91]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1], [item[126], x____00007[6], x____00007[25], x____00007[43], x____00007[60], x____00007[76], x____00007[91]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1], [item[146], x____00008[6], x____00008[25], x____00008[43], x____00008[60], x____00008[76], x____00008[91]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1], [item[166], x____00009[6], x____00009[25], x____00009[43], x____00009[60], x____00009[76], x____00009[91]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1], [item[186], x____00010[6], x____00010[25], x____00010[43], x____00010[60], x____00010[76], x____00010[91]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1], [item[206], x____00011[6], x____00011[25], x____00011[43], x____00011[60], x____00011[76], x____00011[91]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1], [item[226], x____00012[6], x____00012[25], x____00012[43], x____00012[60], x____00012[76], x____00012[91]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1], [item[246], x____00013[6], x____00013[25], x____00013[43], x____00013[60], x____00013[76], x____00013[91]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1], [item[266], x____00014[6], x____00014[25], x____00014[43], x____00014[60], x____00014[76], x____00014[91]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1], [item[286], x____00015[6], x____00015[25], x____00015[43], x____00015[60], x____00015[76], x____00015[91]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1], [item[306], x____00016[6], x____00016[25], x____00016[43], x____00016[60], x____00016[76], x____00016[91]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1], [item[326], x____00017[6], x____00017[25], x____00017[43], x____00017[60], x____00017[76], x____00017[91]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1], [item[346], x____00018[6], x____00018[25], x____00018[43], x____00018[60], x____00018[76], x____00018[91]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1], [item[366], x____00019[6], x____00019[25], x____00019[43], x____00019[60], x____00019[76], x____00019[91]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1], [item[386], x____00020[6], x____00020[25], x____00020[43], x____00020[60], x____00020[76], x____00020[91]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1], [item[7], x____00001[7], x____00001[26], x____00001[44], x____00001[61], x____00001[77], x____00001[92], x____00001[106]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1], [item[27], x____00002[7], x____00002[26], x____00002[44], x____00002[61], x____00002[77], x____00002[92], x____00002[106]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1], [item[47], x____00003[7], x____00003[26], x____00003[44], x____00003[61], x____00003[77], x____00003[92], x____00003[106]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1], [item[67], x____00004[7], x____00004[26], x____00004[44], x____00004[61], x____00004[77], x____00004[92], x____00004[106]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1], [item[87], x____00005[7], x____00005[26], x____00005[44], x____00005[61], x____00005[77], x____00005[92], x____00005[106]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1], [item[107], x____00006[7], x____00006[26], x____00006[44], x____00006[61], x____00006[77], x____00006[92], x____00006[106]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1], [item[127], x____00007[7], x____00007[26], x____00007[44], x____00007[61], x____00007[77], x____00007[92], x____00007[106]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1], [item[147], x____00008[7], x____00008[26], x____00008[44], x____00008[61], x____00008[77], x____00008[92], x____00008[106]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1], [item[167], x____00009[7], x____00009[26], x____00009[44], x____00009[61], x____00009[77], x____00009[92], x____00009[106]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1], [item[187], x____00010[7], x____00010[26], x____00010[44], x____00010[61], x____00010[77], x____00010[92], x____00010[106]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1], [item[207], x____00011[7], x____00011[26], x____00011[44], x____00011[61], x____00011[77], x____00011[92], x____00011[106]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1], [item[227], x____00012[7], x____00012[26], x____00012[44], x____00012[61], x____00012[77], x____00012[92], x____00012[106]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1], [item[247], x____00013[7], x____00013[26], x____00013[44], x____00013[61], x____00013[77], x____00013[92], x____00013[106]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1], [item[267], x____00014[7], x____00014[26], x____00014[44], x____00014[61], x____00014[77], x____00014[92], x____00014[106]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1], [item[287], x____00015[7], x____00015[26], x____00015[44], x____00015[61], x____00015[77], x____00015[92], x____00015[106]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1], [item[307], x____00016[7], x____00016[26], x____00016[44], x____00016[61], x____00016[77], x____00016[92], x____00016[106]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1], [item[327], x____00017[7], x____00017[26], x____00017[44], x____00017[61], x____00017[77], x____00017[92], x____00017[106]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1], [item[347], x____00018[7], x____00018[26], x____00018[44], x____00018[61], x____00018[77], x____00018[92], x____00018[106]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1], [item[367], x____00019[7], x____00019[26], x____00019[44], x____00019[61], x____00019[77], x____00019[92], x____00019[106]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1], [item[387], x____00020[7], x____00020[26], x____00020[44], x____00020[61], x____00020[77], x____00020[92], x____00020[106]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1], [item[8], x____00001[8], x____00001[27], x____00001[45], x____00001[62], x____00001[78], x____00001[93], x____00001[107], x____00001[120]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1], [item[28], x____00002[8], x____00002[27], x____00002[45], x____00002[62], x____00002[78], x____00002[93], x____00002[107], x____00002[120]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1], [item[48], x____00003[8], x____00003[27], x____00003[45], x____00003[62], x____00003[78], x____00003[93], x____00003[107], x____00003[120]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1], [item[68], x____00004[8], x____00004[27], x____00004[45], x____00004[62], x____00004[78], x____00004[93], x____00004[107], x____00004[120]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1], [item[88], x____00005[8], x____00005[27], x____00005[45], x____00005[62], x____00005[78], x____00005[93], x____00005[107], x____00005[120]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1], [item[108], x____00006[8], x____00006[27], x____00006[45], x____00006[62], x____00006[78], x____00006[93], x____00006[107], x____00006[120]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1], [item[128], x____00007[8], x____00007[27], x____00007[45], x____00007[62], x____00007[78], x____00007[93], x____00007[107], x____00007[120]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1], [item[148], x____00008[8], x____00008[27], x____00008[45], x____00008[62], x____00008[78], x____00008[93], x____00008[107], x____00008[120]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1], [item[168], x____00009[8], x____00009[27], x____00009[45], x____00009[62], x____00009[78], x____00009[93], x____00009[107], x____00009[120]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1], [item[188], x____00010[8], x____00010[27], x____00010[45], x____00010[62], x____00010[78], x____00010[93], x____00010[107], x____00010[120]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1], [item[208], x____00011[8], x____00011[27], x____00011[45], x____00011[62], x____00011[78], x____00011[93], x____00011[107], x____00011[120]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1], [item[228], x____00012[8], x____00012[27], x____00012[45], x____00012[62], x____00012[78], x____00012[93], x____00012[107], x____00012[120]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1], [item[248], x____00013[8], x____00013[27], x____00013[45], x____00013[62], x____00013[78], x____00013[93], x____00013[107], x____00013[120]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1], [item[268], x____00014[8], x____00014[27], x____00014[45], x____00014[62], x____00014[78], x____00014[93], x____00014[107], x____00014[120]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1], [item[288], x____00015[8], x____00015[27], x____00015[45], x____00015[62], x____00015[78], x____00015[93], x____00015[107], x____00015[120]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1], [item[308], x____00016[8], x____00016[27], x____00016[45], x____00016[62], x____00016[78], x____00016[93], x____00016[107], x____00016[120]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1], [item[328], x____00017[8], x____00017[27], x____00017[45], x____00017[62], x____00017[78], x____00017[93], x____00017[107], x____00017[120]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1], [item[348], x____00018[8], x____00018[27], x____00018[45], x____00018[62], x____00018[78], x____00018[93], x____00018[107], x____00018[120]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1], [item[368], x____00019[8], x____00019[27], x____00019[45], x____00019[62], x____00019[78], x____00019[93], x____00019[107], x____00019[120]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1], [item[388], x____00020[8], x____00020[27], x____00020[45], x____00020[62], x____00020[78], x____00020[93], x____00020[107], x____00020[120]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[9], x____00001[9], x____00001[28], x____00001[46], x____00001[63], x____00001[79], x____00001[94], x____00001[108], x____00001[121], x____00001[133]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[29], x____00002[9], x____00002[28], x____00002[46], x____00002[63], x____00002[79], x____00002[94], x____00002[108], x____00002[121], x____00002[133]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[49], x____00003[9], x____00003[28], x____00003[46], x____00003[63], x____00003[79], x____00003[94], x____00003[108], x____00003[121], x____00003[133]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[69], x____00004[9], x____00004[28], x____00004[46], x____00004[63], x____00004[79], x____00004[94], x____00004[108], x____00004[121], x____00004[133]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[89], x____00005[9], x____00005[28], x____00005[46], x____00005[63], x____00005[79], x____00005[94], x____00005[108], x____00005[121], x____00005[133]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[109], x____00006[9], x____00006[28], x____00006[46], x____00006[63], x____00006[79], x____00006[94], x____00006[108], x____00006[121], x____00006[133]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[129], x____00007[9], x____00007[28], x____00007[46], x____00007[63], x____00007[79], x____00007[94], x____00007[108], x____00007[121], x____00007[133]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[149], x____00008[9], x____00008[28], x____00008[46], x____00008[63], x____00008[79], x____00008[94], x____00008[108], x____00008[121], x____00008[133]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[169], x____00009[9], x____00009[28], x____00009[46], x____00009[63], x____00009[79], x____00009[94], x____00009[108], x____00009[121], x____00009[133]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[189], x____00010[9], x____00010[28], x____00010[46], x____00010[63], x____00010[79], x____00010[94], x____00010[108], x____00010[121], x____00010[133]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[209], x____00011[9], x____00011[28], x____00011[46], x____00011[63], x____00011[79], x____00011[94], x____00011[108], x____00011[121], x____00011[133]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[229], x____00012[9], x____00012[28], x____00012[46], x____00012[63], x____00012[79], x____00012[94], x____00012[108], x____00012[121], x____00012[133]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[249], x____00013[9], x____00013[28], x____00013[46], x____00013[63], x____00013[79], x____00013[94], x____00013[108], x____00013[121], x____00013[133]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[269], x____00014[9], x____00014[28], x____00014[46], x____00014[63], x____00014[79], x____00014[94], x____00014[108], x____00014[121], x____00014[133]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[289], x____00015[9], x____00015[28], x____00015[46], x____00015[63], x____00015[79], x____00015[94], x____00015[108], x____00015[121], x____00015[133]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[309], x____00016[9], x____00016[28], x____00016[46], x____00016[63], x____00016[79], x____00016[94], x____00016[108], x____00016[121], x____00016[133]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[329], x____00017[9], x____00017[28], x____00017[46], x____00017[63], x____00017[79], x____00017[94], x____00017[108], x____00017[121], x____00017[133]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[349], x____00018[9], x____00018[28], x____00018[46], x____00018[63], x____00018[79], x____00018[94], x____00018[108], x____00018[121], x____00018[133]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[369], x____00019[9], x____00019[28], x____00019[46], x____00019[63], x____00019[79], x____00019[94], x____00019[108], x____00019[121], x____00019[133]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[389], x____00020[9], x____00020[28], x____00020[46], x____00020[63], x____00020[79], x____00020[94], x____00020[108], x____00020[121], x____00020[133]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[10], x____00001[10], x____00001[29], x____00001[47], x____00001[64], x____00001[80], x____00001[95], x____00001[109], x____00001[122], x____00001[134], x____00001[145]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[30], x____00002[10], x____00002[29], x____00002[47], x____00002[64], x____00002[80], x____00002[95], x____00002[109], x____00002[122], x____00002[134], x____00002[145]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[50], x____00003[10], x____00003[29], x____00003[47], x____00003[64], x____00003[80], x____00003[95], x____00003[109], x____00003[122], x____00003[134], x____00003[145]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[70], x____00004[10], x____00004[29], x____00004[47], x____00004[64], x____00004[80], x____00004[95], x____00004[109], x____00004[122], x____00004[134], x____00004[145]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[90], x____00005[10], x____00005[29], x____00005[47], x____00005[64], x____00005[80], x____00005[95], x____00005[109], x____00005[122], x____00005[134], x____00005[145]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[110], x____00006[10], x____00006[29], x____00006[47], x____00006[64], x____00006[80], x____00006[95], x____00006[109], x____00006[122], x____00006[134], x____00006[145]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[130], x____00007[10], x____00007[29], x____00007[47], x____00007[64], x____00007[80], x____00007[95], x____00007[109], x____00007[122], x____00007[134], x____00007[145]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[150], x____00008[10], x____00008[29], x____00008[47], x____00008[64], x____00008[80], x____00008[95], x____00008[109], x____00008[122], x____00008[134], x____00008[145]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[170], x____00009[10], x____00009[29], x____00009[47], x____00009[64], x____00009[80], x____00009[95], x____00009[109], x____00009[122], x____00009[134], x____00009[145]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[190], x____00010[10], x____00010[29], x____00010[47], x____00010[64], x____00010[80], x____00010[95], x____00010[109], x____00010[122], x____00010[134], x____00010[145]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[210], x____00011[10], x____00011[29], x____00011[47], x____00011[64], x____00011[80], x____00011[95], x____00011[109], x____00011[122], x____00011[134], x____00011[145]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[230], x____00012[10], x____00012[29], x____00012[47], x____00012[64], x____00012[80], x____00012[95], x____00012[109], x____00012[122], x____00012[134], x____00012[145]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[250], x____00013[10], x____00013[29], x____00013[47], x____00013[64], x____00013[80], x____00013[95], x____00013[109], x____00013[122], x____00013[134], x____00013[145]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[270], x____00014[10], x____00014[29], x____00014[47], x____00014[64], x____00014[80], x____00014[95], x____00014[109], x____00014[122], x____00014[134], x____00014[145]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[290], x____00015[10], x____00015[29], x____00015[47], x____00015[64], x____00015[80], x____00015[95], x____00015[109], x____00015[122], x____00015[134], x____00015[145]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[310], x____00016[10], x____00016[29], x____00016[47], x____00016[64], x____00016[80], x____00016[95], x____00016[109], x____00016[122], x____00016[134], x____00016[145]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[330], x____00017[10], x____00017[29], x____00017[47], x____00017[64], x____00017[80], x____00017[95], x____00017[109], x____00017[122], x____00017[134], x____00017[145]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[350], x____00018[10], x____00018[29], x____00018[47], x____00018[64], x____00018[80], x____00018[95], x____00018[109], x____00018[122], x____00018[134], x____00018[145]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[370], x____00019[10], x____00019[29], x____00019[47], x____00019[64], x____00019[80], x____00019[95], x____00019[109], x____00019[122], x____00019[134], x____00019[145]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[390], x____00020[10], x____00020[29], x____00020[47], x____00020[64], x____00020[80], x____00020[95], x____00020[109], x____00020[122], x____00020[134], x____00020[145]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[11], x____00001[11], x____00001[30], x____00001[48], x____00001[65], x____00001[81], x____00001[96], x____00001[110], x____00001[123], x____00001[135], x____00001[146], x____00001[156]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[31], x____00002[11], x____00002[30], x____00002[48], x____00002[65], x____00002[81], x____00002[96], x____00002[110], x____00002[123], x____00002[135], x____00002[146], x____00002[156]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[51], x____00003[11], x____00003[30], x____00003[48], x____00003[65], x____00003[81], x____00003[96], x____00003[110], x____00003[123], x____00003[135], x____00003[146], x____00003[156]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[71], x____00004[11], x____00004[30], x____00004[48], x____00004[65], x____00004[81], x____00004[96], x____00004[110], x____00004[123], x____00004[135], x____00004[146], x____00004[156]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[91], x____00005[11], x____00005[30], x____00005[48], x____00005[65], x____00005[81], x____00005[96], x____00005[110], x____00005[123], x____00005[135], x____00005[146], x____00005[156]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[111], x____00006[11], x____00006[30], x____00006[48], x____00006[65], x____00006[81], x____00006[96], x____00006[110], x____00006[123], x____00006[135], x____00006[146], x____00006[156]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[131], x____00007[11], x____00007[30], x____00007[48], x____00007[65], x____00007[81], x____00007[96], x____00007[110], x____00007[123], x____00007[135], x____00007[146], x____00007[156]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[151], x____00008[11], x____00008[30], x____00008[48], x____00008[65], x____00008[81], x____00008[96], x____00008[110], x____00008[123], x____00008[135], x____00008[146], x____00008[156]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[171], x____00009[11], x____00009[30], x____00009[48], x____00009[65], x____00009[81], x____00009[96], x____00009[110], x____00009[123], x____00009[135], x____00009[146], x____00009[156]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[191], x____00010[11], x____00010[30], x____00010[48], x____00010[65], x____00010[81], x____00010[96], x____00010[110], x____00010[123], x____00010[135], x____00010[146], x____00010[156]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[211], x____00011[11], x____00011[30], x____00011[48], x____00011[65], x____00011[81], x____00011[96], x____00011[110], x____00011[123], x____00011[135], x____00011[146], x____00011[156]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[231], x____00012[11], x____00012[30], x____00012[48], x____00012[65], x____00012[81], x____00012[96], x____00012[110], x____00012[123], x____00012[135], x____00012[146], x____00012[156]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[251], x____00013[11], x____00013[30], x____00013[48], x____00013[65], x____00013[81], x____00013[96], x____00013[110], x____00013[123], x____00013[135], x____00013[146], x____00013[156]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[271], x____00014[11], x____00014[30], x____00014[48], x____00014[65], x____00014[81], x____00014[96], x____00014[110], x____00014[123], x____00014[135], x____00014[146], x____00014[156]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[291], x____00015[11], x____00015[30], x____00015[48], x____00015[65], x____00015[81], x____00015[96], x____00015[110], x____00015[123], x____00015[135], x____00015[146], x____00015[156]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[311], x____00016[11], x____00016[30], x____00016[48], x____00016[65], x____00016[81], x____00016[96], x____00016[110], x____00016[123], x____00016[135], x____00016[146], x____00016[156]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[331], x____00017[11], x____00017[30], x____00017[48], x____00017[65], x____00017[81], x____00017[96], x____00017[110], x____00017[123], x____00017[135], x____00017[146], x____00017[156]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[351], x____00018[11], x____00018[30], x____00018[48], x____00018[65], x____00018[81], x____00018[96], x____00018[110], x____00018[123], x____00018[135], x____00018[146], x____00018[156]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[371], x____00019[11], x____00019[30], x____00019[48], x____00019[65], x____00019[81], x____00019[96], x____00019[110], x____00019[123], x____00019[135], x____00019[146], x____00019[156]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[391], x____00020[11], x____00020[30], x____00020[48], x____00020[65], x____00020[81], x____00020[96], x____00020[110], x____00020[123], x____00020[135], x____00020[146], x____00020[156]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[12], x____00001[12], x____00001[31], x____00001[49], x____00001[66], x____00001[82], x____00001[97], x____00001[111], x____00001[124], x____00001[136], x____00001[147], x____00001[157], x____00001[166]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[32], x____00002[12], x____00002[31], x____00002[49], x____00002[66], x____00002[82], x____00002[97], x____00002[111], x____00002[124], x____00002[136], x____00002[147], x____00002[157], x____00002[166]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[52], x____00003[12], x____00003[31], x____00003[49], x____00003[66], x____00003[82], x____00003[97], x____00003[111], x____00003[124], x____00003[136], x____00003[147], x____00003[157], x____00003[166]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[72], x____00004[12], x____00004[31], x____00004[49], x____00004[66], x____00004[82], x____00004[97], x____00004[111], x____00004[124], x____00004[136], x____00004[147], x____00004[157], x____00004[166]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[92], x____00005[12], x____00005[31], x____00005[49], x____00005[66], x____00005[82], x____00005[97], x____00005[111], x____00005[124], x____00005[136], x____00005[147], x____00005[157], x____00005[166]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[112], x____00006[12], x____00006[31], x____00006[49], x____00006[66], x____00006[82], x____00006[97], x____00006[111], x____00006[124], x____00006[136], x____00006[147], x____00006[157], x____00006[166]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[132], x____00007[12], x____00007[31], x____00007[49], x____00007[66], x____00007[82], x____00007[97], x____00007[111], x____00007[124], x____00007[136], x____00007[147], x____00007[157], x____00007[166]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[152], x____00008[12], x____00008[31], x____00008[49], x____00008[66], x____00008[82], x____00008[97], x____00008[111], x____00008[124], x____00008[136], x____00008[147], x____00008[157], x____00008[166]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[172], x____00009[12], x____00009[31], x____00009[49], x____00009[66], x____00009[82], x____00009[97], x____00009[111], x____00009[124], x____00009[136], x____00009[147], x____00009[157], x____00009[166]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[192], x____00010[12], x____00010[31], x____00010[49], x____00010[66], x____00010[82], x____00010[97], x____00010[111], x____00010[124], x____00010[136], x____00010[147], x____00010[157], x____00010[166]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[212], x____00011[12], x____00011[31], x____00011[49], x____00011[66], x____00011[82], x____00011[97], x____00011[111], x____00011[124], x____00011[136], x____00011[147], x____00011[157], x____00011[166]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[232], x____00012[12], x____00012[31], x____00012[49], x____00012[66], x____00012[82], x____00012[97], x____00012[111], x____00012[124], x____00012[136], x____00012[147], x____00012[157], x____00012[166]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[252], x____00013[12], x____00013[31], x____00013[49], x____00013[66], x____00013[82], x____00013[97], x____00013[111], x____00013[124], x____00013[136], x____00013[147], x____00013[157], x____00013[166]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[272], x____00014[12], x____00014[31], x____00014[49], x____00014[66], x____00014[82], x____00014[97], x____00014[111], x____00014[124], x____00014[136], x____00014[147], x____00014[157], x____00014[166]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[292], x____00015[12], x____00015[31], x____00015[49], x____00015[66], x____00015[82], x____00015[97], x____00015[111], x____00015[124], x____00015[136], x____00015[147], x____00015[157], x____00015[166]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[312], x____00016[12], x____00016[31], x____00016[49], x____00016[66], x____00016[82], x____00016[97], x____00016[111], x____00016[124], x____00016[136], x____00016[147], x____00016[157], x____00016[166]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[332], x____00017[12], x____00017[31], x____00017[49], x____00017[66], x____00017[82], x____00017[97], x____00017[111], x____00017[124], x____00017[136], x____00017[147], x____00017[157], x____00017[166]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[352], x____00018[12], x____00018[31], x____00018[49], x____00018[66], x____00018[82], x____00018[97], x____00018[111], x____00018[124], x____00018[136], x____00018[147], x____00018[157], x____00018[166]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[372], x____00019[12], x____00019[31], x____00019[49], x____00019[66], x____00019[82], x____00019[97], x____00019[111], x____00019[124], x____00019[136], x____00019[147], x____00019[157], x____00019[166]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[392], x____00020[12], x____00020[31], x____00020[49], x____00020[66], x____00020[82], x____00020[97], x____00020[111], x____00020[124], x____00020[136], x____00020[147], x____00020[157], x____00020[166]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[13], x____00001[13], x____00001[32], x____00001[50], x____00001[67], x____00001[83], x____00001[98], x____00001[112], x____00001[125], x____00001[137], x____00001[148], x____00001[158], x____00001[167], x____00001[175]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[33], x____00002[13], x____00002[32], x____00002[50], x____00002[67], x____00002[83], x____00002[98], x____00002[112], x____00002[125], x____00002[137], x____00002[148], x____00002[158], x____00002[167], x____00002[175]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[53], x____00003[13], x____00003[32], x____00003[50], x____00003[67], x____00003[83], x____00003[98], x____00003[112], x____00003[125], x____00003[137], x____00003[148], x____00003[158], x____00003[167], x____00003[175]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[73], x____00004[13], x____00004[32], x____00004[50], x____00004[67], x____00004[83], x____00004[98], x____00004[112], x____00004[125], x____00004[137], x____00004[148], x____00004[158], x____00004[167], x____00004[175]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[93], x____00005[13], x____00005[32], x____00005[50], x____00005[67], x____00005[83], x____00005[98], x____00005[112], x____00005[125], x____00005[137], x____00005[148], x____00005[158], x____00005[167], x____00005[175]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[113], x____00006[13], x____00006[32], x____00006[50], x____00006[67], x____00006[83], x____00006[98], x____00006[112], x____00006[125], x____00006[137], x____00006[148], x____00006[158], x____00006[167], x____00006[175]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[133], x____00007[13], x____00007[32], x____00007[50], x____00007[67], x____00007[83], x____00007[98], x____00007[112], x____00007[125], x____00007[137], x____00007[148], x____00007[158], x____00007[167], x____00007[175]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[153], x____00008[13], x____00008[32], x____00008[50], x____00008[67], x____00008[83], x____00008[98], x____00008[112], x____00008[125], x____00008[137], x____00008[148], x____00008[158], x____00008[167], x____00008[175]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[173], x____00009[13], x____00009[32], x____00009[50], x____00009[67], x____00009[83], x____00009[98], x____00009[112], x____00009[125], x____00009[137], x____00009[148], x____00009[158], x____00009[167], x____00009[175]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[193], x____00010[13], x____00010[32], x____00010[50], x____00010[67], x____00010[83], x____00010[98], x____00010[112], x____00010[125], x____00010[137], x____00010[148], x____00010[158], x____00010[167], x____00010[175]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[213], x____00011[13], x____00011[32], x____00011[50], x____00011[67], x____00011[83], x____00011[98], x____00011[112], x____00011[125], x____00011[137], x____00011[148], x____00011[158], x____00011[167], x____00011[175]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[233], x____00012[13], x____00012[32], x____00012[50], x____00012[67], x____00012[83], x____00012[98], x____00012[112], x____00012[125], x____00012[137], x____00012[148], x____00012[158], x____00012[167], x____00012[175]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[253], x____00013[13], x____00013[32], x____00013[50], x____00013[67], x____00013[83], x____00013[98], x____00013[112], x____00013[125], x____00013[137], x____00013[148], x____00013[158], x____00013[167], x____00013[175]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[273], x____00014[13], x____00014[32], x____00014[50], x____00014[67], x____00014[83], x____00014[98], x____00014[112], x____00014[125], x____00014[137], x____00014[148], x____00014[158], x____00014[167], x____00014[175]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[293], x____00015[13], x____00015[32], x____00015[50], x____00015[67], x____00015[83], x____00015[98], x____00015[112], x____00015[125], x____00015[137], x____00015[148], x____00015[158], x____00015[167], x____00015[175]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[313], x____00016[13], x____00016[32], x____00016[50], x____00016[67], x____00016[83], x____00016[98], x____00016[112], x____00016[125], x____00016[137], x____00016[148], x____00016[158], x____00016[167], x____00016[175]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[333], x____00017[13], x____00017[32], x____00017[50], x____00017[67], x____00017[83], x____00017[98], x____00017[112], x____00017[125], x____00017[137], x____00017[148], x____00017[158], x____00017[167], x____00017[175]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[353], x____00018[13], x____00018[32], x____00018[50], x____00018[67], x____00018[83], x____00018[98], x____00018[112], x____00018[125], x____00018[137], x____00018[148], x____00018[158], x____00018[167], x____00018[175]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[373], x____00019[13], x____00019[32], x____00019[50], x____00019[67], x____00019[83], x____00019[98], x____00019[112], x____00019[125], x____00019[137], x____00019[148], x____00019[158], x____00019[167], x____00019[175]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[393], x____00020[13], x____00020[32], x____00020[50], x____00020[67], x____00020[83], x____00020[98], x____00020[112], x____00020[125], x____00020[137], x____00020[148], x____00020[158], x____00020[167], x____00020[175]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[14], x____00001[14], x____00001[33], x____00001[51], x____00001[68], x____00001[84], x____00001[99], x____00001[113], x____00001[126], x____00001[138], x____00001[149], x____00001[159], x____00001[168], x____00001[176], x____00001[183]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[34], x____00002[14], x____00002[33], x____00002[51], x____00002[68], x____00002[84], x____00002[99], x____00002[113], x____00002[126], x____00002[138], x____00002[149], x____00002[159], x____00002[168], x____00002[176], x____00002[183]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[54], x____00003[14], x____00003[33], x____00003[51], x____00003[68], x____00003[84], x____00003[99], x____00003[113], x____00003[126], x____00003[138], x____00003[149], x____00003[159], x____00003[168], x____00003[176], x____00003[183]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[74], x____00004[14], x____00004[33], x____00004[51], x____00004[68], x____00004[84], x____00004[99], x____00004[113], x____00004[126], x____00004[138], x____00004[149], x____00004[159], x____00004[168], x____00004[176], x____00004[183]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[94], x____00005[14], x____00005[33], x____00005[51], x____00005[68], x____00005[84], x____00005[99], x____00005[113], x____00005[126], x____00005[138], x____00005[149], x____00005[159], x____00005[168], x____00005[176], x____00005[183]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[114], x____00006[14], x____00006[33], x____00006[51], x____00006[68], x____00006[84], x____00006[99], x____00006[113], x____00006[126], x____00006[138], x____00006[149], x____00006[159], x____00006[168], x____00006[176], x____00006[183]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[134], x____00007[14], x____00007[33], x____00007[51], x____00007[68], x____00007[84], x____00007[99], x____00007[113], x____00007[126], x____00007[138], x____00007[149], x____00007[159], x____00007[168], x____00007[176], x____00007[183]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[154], x____00008[14], x____00008[33], x____00008[51], x____00008[68], x____00008[84], x____00008[99], x____00008[113], x____00008[126], x____00008[138], x____00008[149], x____00008[159], x____00008[168], x____00008[176], x____00008[183]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[174], x____00009[14], x____00009[33], x____00009[51], x____00009[68], x____00009[84], x____00009[99], x____00009[113], x____00009[126], x____00009[138], x____00009[149], x____00009[159], x____00009[168], x____00009[176], x____00009[183]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[194], x____00010[14], x____00010[33], x____00010[51], x____00010[68], x____00010[84], x____00010[99], x____00010[113], x____00010[126], x____00010[138], x____00010[149], x____00010[159], x____00010[168], x____00010[176], x____00010[183]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[214], x____00011[14], x____00011[33], x____00011[51], x____00011[68], x____00011[84], x____00011[99], x____00011[113], x____00011[126], x____00011[138], x____00011[149], x____00011[159], x____00011[168], x____00011[176], x____00011[183]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[234], x____00012[14], x____00012[33], x____00012[51], x____00012[68], x____00012[84], x____00012[99], x____00012[113], x____00012[126], x____00012[138], x____00012[149], x____00012[159], x____00012[168], x____00012[176], x____00012[183]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[254], x____00013[14], x____00013[33], x____00013[51], x____00013[68], x____00013[84], x____00013[99], x____00013[113], x____00013[126], x____00013[138], x____00013[149], x____00013[159], x____00013[168], x____00013[176], x____00013[183]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[274], x____00014[14], x____00014[33], x____00014[51], x____00014[68], x____00014[84], x____00014[99], x____00014[113], x____00014[126], x____00014[138], x____00014[149], x____00014[159], x____00014[168], x____00014[176], x____00014[183]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[294], x____00015[14], x____00015[33], x____00015[51], x____00015[68], x____00015[84], x____00015[99], x____00015[113], x____00015[126], x____00015[138], x____00015[149], x____00015[159], x____00015[168], x____00015[176], x____00015[183]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[314], x____00016[14], x____00016[33], x____00016[51], x____00016[68], x____00016[84], x____00016[99], x____00016[113], x____00016[126], x____00016[138], x____00016[149], x____00016[159], x____00016[168], x____00016[176], x____00016[183]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[334], x____00017[14], x____00017[33], x____00017[51], x____00017[68], x____00017[84], x____00017[99], x____00017[113], x____00017[126], x____00017[138], x____00017[149], x____00017[159], x____00017[168], x____00017[176], x____00017[183]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[354], x____00018[14], x____00018[33], x____00018[51], x____00018[68], x____00018[84], x____00018[99], x____00018[113], x____00018[126], x____00018[138], x____00018[149], x____00018[159], x____00018[168], x____00018[176], x____00018[183]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[374], x____00019[14], x____00019[33], x____00019[51], x____00019[68], x____00019[84], x____00019[99], x____00019[113], x____00019[126], x____00019[138], x____00019[149], x____00019[159], x____00019[168], x____00019[176], x____00019[183]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[394], x____00020[14], x____00020[33], x____00020[51], x____00020[68], x____00020[84], x____00020[99], x____00020[113], x____00020[126], x____00020[138], x____00020[149], x____00020[159], x____00020[168], x____00020[176], x____00020[183]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[15], x____00001[15], x____00001[34], x____00001[52], x____00001[69], x____00001[85], x____00001[100], x____00001[114], x____00001[127], x____00001[139], x____00001[150], x____00001[160], x____00001[169], x____00001[177], x____00001[184], x____00001[190]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[35], x____00002[15], x____00002[34], x____00002[52], x____00002[69], x____00002[85], x____00002[100], x____00002[114], x____00002[127], x____00002[139], x____00002[150], x____00002[160], x____00002[169], x____00002[177], x____00002[184], x____00002[190]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[55], x____00003[15], x____00003[34], x____00003[52], x____00003[69], x____00003[85], x____00003[100], x____00003[114], x____00003[127], x____00003[139], x____00003[150], x____00003[160], x____00003[169], x____00003[177], x____00003[184], x____00003[190]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[75], x____00004[15], x____00004[34], x____00004[52], x____00004[69], x____00004[85], x____00004[100], x____00004[114], x____00004[127], x____00004[139], x____00004[150], x____00004[160], x____00004[169], x____00004[177], x____00004[184], x____00004[190]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[95], x____00005[15], x____00005[34], x____00005[52], x____00005[69], x____00005[85], x____00005[100], x____00005[114], x____00005[127], x____00005[139], x____00005[150], x____00005[160], x____00005[169], x____00005[177], x____00005[184], x____00005[190]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[115], x____00006[15], x____00006[34], x____00006[52], x____00006[69], x____00006[85], x____00006[100], x____00006[114], x____00006[127], x____00006[139], x____00006[150], x____00006[160], x____00006[169], x____00006[177], x____00006[184], x____00006[190]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[135], x____00007[15], x____00007[34], x____00007[52], x____00007[69], x____00007[85], x____00007[100], x____00007[114], x____00007[127], x____00007[139], x____00007[150], x____00007[160], x____00007[169], x____00007[177], x____00007[184], x____00007[190]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[155], x____00008[15], x____00008[34], x____00008[52], x____00008[69], x____00008[85], x____00008[100], x____00008[114], x____00008[127], x____00008[139], x____00008[150], x____00008[160], x____00008[169], x____00008[177], x____00008[184], x____00008[190]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[175], x____00009[15], x____00009[34], x____00009[52], x____00009[69], x____00009[85], x____00009[100], x____00009[114], x____00009[127], x____00009[139], x____00009[150], x____00009[160], x____00009[169], x____00009[177], x____00009[184], x____00009[190]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[195], x____00010[15], x____00010[34], x____00010[52], x____00010[69], x____00010[85], x____00010[100], x____00010[114], x____00010[127], x____00010[139], x____00010[150], x____00010[160], x____00010[169], x____00010[177], x____00010[184], x____00010[190]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[215], x____00011[15], x____00011[34], x____00011[52], x____00011[69], x____00011[85], x____00011[100], x____00011[114], x____00011[127], x____00011[139], x____00011[150], x____00011[160], x____00011[169], x____00011[177], x____00011[184], x____00011[190]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[235], x____00012[15], x____00012[34], x____00012[52], x____00012[69], x____00012[85], x____00012[100], x____00012[114], x____00012[127], x____00012[139], x____00012[150], x____00012[160], x____00012[169], x____00012[177], x____00012[184], x____00012[190]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[255], x____00013[15], x____00013[34], x____00013[52], x____00013[69], x____00013[85], x____00013[100], x____00013[114], x____00013[127], x____00013[139], x____00013[150], x____00013[160], x____00013[169], x____00013[177], x____00013[184], x____00013[190]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[275], x____00014[15], x____00014[34], x____00014[52], x____00014[69], x____00014[85], x____00014[100], x____00014[114], x____00014[127], x____00014[139], x____00014[150], x____00014[160], x____00014[169], x____00014[177], x____00014[184], x____00014[190]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[295], x____00015[15], x____00015[34], x____00015[52], x____00015[69], x____00015[85], x____00015[100], x____00015[114], x____00015[127], x____00015[139], x____00015[150], x____00015[160], x____00015[169], x____00015[177], x____00015[184], x____00015[190]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[315], x____00016[15], x____00016[34], x____00016[52], x____00016[69], x____00016[85], x____00016[100], x____00016[114], x____00016[127], x____00016[139], x____00016[150], x____00016[160], x____00016[169], x____00016[177], x____00016[184], x____00016[190]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[335], x____00017[15], x____00017[34], x____00017[52], x____00017[69], x____00017[85], x____00017[100], x____00017[114], x____00017[127], x____00017[139], x____00017[150], x____00017[160], x____00017[169], x____00017[177], x____00017[184], x____00017[190]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[355], x____00018[15], x____00018[34], x____00018[52], x____00018[69], x____00018[85], x____00018[100], x____00018[114], x____00018[127], x____00018[139], x____00018[150], x____00018[160], x____00018[169], x____00018[177], x____00018[184], x____00018[190]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[375], x____00019[15], x____00019[34], x____00019[52], x____00019[69], x____00019[85], x____00019[100], x____00019[114], x____00019[127], x____00019[139], x____00019[150], x____00019[160], x____00019[169], x____00019[177], x____00019[184], x____00019[190]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[395], x____00020[15], x____00020[34], x____00020[52], x____00020[69], x____00020[85], x____00020[100], x____00020[114], x____00020[127], x____00020[139], x____00020[150], x____00020[160], x____00020[169], x____00020[177], x____00020[184], x____00020[190]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[16], x____00001[16], x____00001[35], x____00001[53], x____00001[70], x____00001[86], x____00001[101], x____00001[115], x____00001[128], x____00001[140], x____00001[151], x____00001[161], x____00001[170], x____00001[178], x____00001[185], x____00001[191], x____00001[196]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[36], x____00002[16], x____00002[35], x____00002[53], x____00002[70], x____00002[86], x____00002[101], x____00002[115], x____00002[128], x____00002[140], x____00002[151], x____00002[161], x____00002[170], x____00002[178], x____00002[185], x____00002[191], x____00002[196]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[56], x____00003[16], x____00003[35], x____00003[53], x____00003[70], x____00003[86], x____00003[101], x____00003[115], x____00003[128], x____00003[140], x____00003[151], x____00003[161], x____00003[170], x____00003[178], x____00003[185], x____00003[191], x____00003[196]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[76], x____00004[16], x____00004[35], x____00004[53], x____00004[70], x____00004[86], x____00004[101], x____00004[115], x____00004[128], x____00004[140], x____00004[151], x____00004[161], x____00004[170], x____00004[178], x____00004[185], x____00004[191], x____00004[196]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[96], x____00005[16], x____00005[35], x____00005[53], x____00005[70], x____00005[86], x____00005[101], x____00005[115], x____00005[128], x____00005[140], x____00005[151], x____00005[161], x____00005[170], x____00005[178], x____00005[185], x____00005[191], x____00005[196]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[116], x____00006[16], x____00006[35], x____00006[53], x____00006[70], x____00006[86], x____00006[101], x____00006[115], x____00006[128], x____00006[140], x____00006[151], x____00006[161], x____00006[170], x____00006[178], x____00006[185], x____00006[191], x____00006[196]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[136], x____00007[16], x____00007[35], x____00007[53], x____00007[70], x____00007[86], x____00007[101], x____00007[115], x____00007[128], x____00007[140], x____00007[151], x____00007[161], x____00007[170], x____00007[178], x____00007[185], x____00007[191], x____00007[196]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[156], x____00008[16], x____00008[35], x____00008[53], x____00008[70], x____00008[86], x____00008[101], x____00008[115], x____00008[128], x____00008[140], x____00008[151], x____00008[161], x____00008[170], x____00008[178], x____00008[185], x____00008[191], x____00008[196]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[176], x____00009[16], x____00009[35], x____00009[53], x____00009[70], x____00009[86], x____00009[101], x____00009[115], x____00009[128], x____00009[140], x____00009[151], x____00009[161], x____00009[170], x____00009[178], x____00009[185], x____00009[191], x____00009[196]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[196], x____00010[16], x____00010[35], x____00010[53], x____00010[70], x____00010[86], x____00010[101], x____00010[115], x____00010[128], x____00010[140], x____00010[151], x____00010[161], x____00010[170], x____00010[178], x____00010[185], x____00010[191], x____00010[196]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[216], x____00011[16], x____00011[35], x____00011[53], x____00011[70], x____00011[86], x____00011[101], x____00011[115], x____00011[128], x____00011[140], x____00011[151], x____00011[161], x____00011[170], x____00011[178], x____00011[185], x____00011[191], x____00011[196]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[236], x____00012[16], x____00012[35], x____00012[53], x____00012[70], x____00012[86], x____00012[101], x____00012[115], x____00012[128], x____00012[140], x____00012[151], x____00012[161], x____00012[170], x____00012[178], x____00012[185], x____00012[191], x____00012[196]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[256], x____00013[16], x____00013[35], x____00013[53], x____00013[70], x____00013[86], x____00013[101], x____00013[115], x____00013[128], x____00013[140], x____00013[151], x____00013[161], x____00013[170], x____00013[178], x____00013[185], x____00013[191], x____00013[196]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[276], x____00014[16], x____00014[35], x____00014[53], x____00014[70], x____00014[86], x____00014[101], x____00014[115], x____00014[128], x____00014[140], x____00014[151], x____00014[161], x____00014[170], x____00014[178], x____00014[185], x____00014[191], x____00014[196]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[296], x____00015[16], x____00015[35], x____00015[53], x____00015[70], x____00015[86], x____00015[101], x____00015[115], x____00015[128], x____00015[140], x____00015[151], x____00015[161], x____00015[170], x____00015[178], x____00015[185], x____00015[191], x____00015[196]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[316], x____00016[16], x____00016[35], x____00016[53], x____00016[70], x____00016[86], x____00016[101], x____00016[115], x____00016[128], x____00016[140], x____00016[151], x____00016[161], x____00016[170], x____00016[178], x____00016[185], x____00016[191], x____00016[196]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[336], x____00017[16], x____00017[35], x____00017[53], x____00017[70], x____00017[86], x____00017[101], x____00017[115], x____00017[128], x____00017[140], x____00017[151], x____00017[161], x____00017[170], x____00017[178], x____00017[185], x____00017[191], x____00017[196]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[356], x____00018[16], x____00018[35], x____00018[53], x____00018[70], x____00018[86], x____00018[101], x____00018[115], x____00018[128], x____00018[140], x____00018[151], x____00018[161], x____00018[170], x____00018[178], x____00018[185], x____00018[191], x____00018[196]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[376], x____00019[16], x____00019[35], x____00019[53], x____00019[70], x____00019[86], x____00019[101], x____00019[115], x____00019[128], x____00019[140], x____00019[151], x____00019[161], x____00019[170], x____00019[178], x____00019[185], x____00019[191], x____00019[196]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[396], x____00020[16], x____00020[35], x____00020[53], x____00020[70], x____00020[86], x____00020[101], x____00020[115], x____00020[128], x____00020[140], x____00020[151], x____00020[161], x____00020[170], x____00020[178], x____00020[185], x____00020[191], x____00020[196]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[17], x____00001[17], x____00001[36], x____00001[54], x____00001[71], x____00001[87], x____00001[102], x____00001[116], x____00001[129], x____00001[141], x____00001[152], x____00001[162], x____00001[171], x____00001[179], x____00001[186], x____00001[192], x____00001[197], x____00001[201]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[37], x____00002[17], x____00002[36], x____00002[54], x____00002[71], x____00002[87], x____00002[102], x____00002[116], x____00002[129], x____00002[141], x____00002[152], x____00002[162], x____00002[171], x____00002[179], x____00002[186], x____00002[192], x____00002[197], x____00002[201]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[57], x____00003[17], x____00003[36], x____00003[54], x____00003[71], x____00003[87], x____00003[102], x____00003[116], x____00003[129], x____00003[141], x____00003[152], x____00003[162], x____00003[171], x____00003[179], x____00003[186], x____00003[192], x____00003[197], x____00003[201]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[77], x____00004[17], x____00004[36], x____00004[54], x____00004[71], x____00004[87], x____00004[102], x____00004[116], x____00004[129], x____00004[141], x____00004[152], x____00004[162], x____00004[171], x____00004[179], x____00004[186], x____00004[192], x____00004[197], x____00004[201]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[97], x____00005[17], x____00005[36], x____00005[54], x____00005[71], x____00005[87], x____00005[102], x____00005[116], x____00005[129], x____00005[141], x____00005[152], x____00005[162], x____00005[171], x____00005[179], x____00005[186], x____00005[192], x____00005[197], x____00005[201]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[117], x____00006[17], x____00006[36], x____00006[54], x____00006[71], x____00006[87], x____00006[102], x____00006[116], x____00006[129], x____00006[141], x____00006[152], x____00006[162], x____00006[171], x____00006[179], x____00006[186], x____00006[192], x____00006[197], x____00006[201]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[137], x____00007[17], x____00007[36], x____00007[54], x____00007[71], x____00007[87], x____00007[102], x____00007[116], x____00007[129], x____00007[141], x____00007[152], x____00007[162], x____00007[171], x____00007[179], x____00007[186], x____00007[192], x____00007[197], x____00007[201]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[157], x____00008[17], x____00008[36], x____00008[54], x____00008[71], x____00008[87], x____00008[102], x____00008[116], x____00008[129], x____00008[141], x____00008[152], x____00008[162], x____00008[171], x____00008[179], x____00008[186], x____00008[192], x____00008[197], x____00008[201]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[177], x____00009[17], x____00009[36], x____00009[54], x____00009[71], x____00009[87], x____00009[102], x____00009[116], x____00009[129], x____00009[141], x____00009[152], x____00009[162], x____00009[171], x____00009[179], x____00009[186], x____00009[192], x____00009[197], x____00009[201]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[197], x____00010[17], x____00010[36], x____00010[54], x____00010[71], x____00010[87], x____00010[102], x____00010[116], x____00010[129], x____00010[141], x____00010[152], x____00010[162], x____00010[171], x____00010[179], x____00010[186], x____00010[192], x____00010[197], x____00010[201]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[217], x____00011[17], x____00011[36], x____00011[54], x____00011[71], x____00011[87], x____00011[102], x____00011[116], x____00011[129], x____00011[141], x____00011[152], x____00011[162], x____00011[171], x____00011[179], x____00011[186], x____00011[192], x____00011[197], x____00011[201]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[237], x____00012[17], x____00012[36], x____00012[54], x____00012[71], x____00012[87], x____00012[102], x____00012[116], x____00012[129], x____00012[141], x____00012[152], x____00012[162], x____00012[171], x____00012[179], x____00012[186], x____00012[192], x____00012[197], x____00012[201]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[257], x____00013[17], x____00013[36], x____00013[54], x____00013[71], x____00013[87], x____00013[102], x____00013[116], x____00013[129], x____00013[141], x____00013[152], x____00013[162], x____00013[171], x____00013[179], x____00013[186], x____00013[192], x____00013[197], x____00013[201]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[277], x____00014[17], x____00014[36], x____00014[54], x____00014[71], x____00014[87], x____00014[102], x____00014[116], x____00014[129], x____00014[141], x____00014[152], x____00014[162], x____00014[171], x____00014[179], x____00014[186], x____00014[192], x____00014[197], x____00014[201]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[297], x____00015[17], x____00015[36], x____00015[54], x____00015[71], x____00015[87], x____00015[102], x____00015[116], x____00015[129], x____00015[141], x____00015[152], x____00015[162], x____00015[171], x____00015[179], x____00015[186], x____00015[192], x____00015[197], x____00015[201]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[317], x____00016[17], x____00016[36], x____00016[54], x____00016[71], x____00016[87], x____00016[102], x____00016[116], x____00016[129], x____00016[141], x____00016[152], x____00016[162], x____00016[171], x____00016[179], x____00016[186], x____00016[192], x____00016[197], x____00016[201]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[337], x____00017[17], x____00017[36], x____00017[54], x____00017[71], x____00017[87], x____00017[102], x____00017[116], x____00017[129], x____00017[141], x____00017[152], x____00017[162], x____00017[171], x____00017[179], x____00017[186], x____00017[192], x____00017[197], x____00017[201]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[357], x____00018[17], x____00018[36], x____00018[54], x____00018[71], x____00018[87], x____00018[102], x____00018[116], x____00018[129], x____00018[141], x____00018[152], x____00018[162], x____00018[171], x____00018[179], x____00018[186], x____00018[192], x____00018[197], x____00018[201]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[377], x____00019[17], x____00019[36], x____00019[54], x____00019[71], x____00019[87], x____00019[102], x____00019[116], x____00019[129], x____00019[141], x____00019[152], x____00019[162], x____00019[171], x____00019[179], x____00019[186], x____00019[192], x____00019[197], x____00019[201]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[397], x____00020[17], x____00020[36], x____00020[54], x____00020[71], x____00020[87], x____00020[102], x____00020[116], x____00020[129], x____00020[141], x____00020[152], x____00020[162], x____00020[171], x____00020[179], x____00020[186], x____00020[192], x____00020[197], x____00020[201]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[18], x____00001[18], x____00001[37], x____00001[55], x____00001[72], x____00001[88], x____00001[103], x____00001[117], x____00001[130], x____00001[142], x____00001[153], x____00001[163], x____00001[172], x____00001[180], x____00001[187], x____00001[193], x____00001[198], x____00001[202], x____00001[205]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[38], x____00002[18], x____00002[37], x____00002[55], x____00002[72], x____00002[88], x____00002[103], x____00002[117], x____00002[130], x____00002[142], x____00002[153], x____00002[163], x____00002[172], x____00002[180], x____00002[187], x____00002[193], x____00002[198], x____00002[202], x____00002[205]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[58], x____00003[18], x____00003[37], x____00003[55], x____00003[72], x____00003[88], x____00003[103], x____00003[117], x____00003[130], x____00003[142], x____00003[153], x____00003[163], x____00003[172], x____00003[180], x____00003[187], x____00003[193], x____00003[198], x____00003[202], x____00003[205]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[78], x____00004[18], x____00004[37], x____00004[55], x____00004[72], x____00004[88], x____00004[103], x____00004[117], x____00004[130], x____00004[142], x____00004[153], x____00004[163], x____00004[172], x____00004[180], x____00004[187], x____00004[193], x____00004[198], x____00004[202], x____00004[205]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[98], x____00005[18], x____00005[37], x____00005[55], x____00005[72], x____00005[88], x____00005[103], x____00005[117], x____00005[130], x____00005[142], x____00005[153], x____00005[163], x____00005[172], x____00005[180], x____00005[187], x____00005[193], x____00005[198], x____00005[202], x____00005[205]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[118], x____00006[18], x____00006[37], x____00006[55], x____00006[72], x____00006[88], x____00006[103], x____00006[117], x____00006[130], x____00006[142], x____00006[153], x____00006[163], x____00006[172], x____00006[180], x____00006[187], x____00006[193], x____00006[198], x____00006[202], x____00006[205]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[138], x____00007[18], x____00007[37], x____00007[55], x____00007[72], x____00007[88], x____00007[103], x____00007[117], x____00007[130], x____00007[142], x____00007[153], x____00007[163], x____00007[172], x____00007[180], x____00007[187], x____00007[193], x____00007[198], x____00007[202], x____00007[205]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[158], x____00008[18], x____00008[37], x____00008[55], x____00008[72], x____00008[88], x____00008[103], x____00008[117], x____00008[130], x____00008[142], x____00008[153], x____00008[163], x____00008[172], x____00008[180], x____00008[187], x____00008[193], x____00008[198], x____00008[202], x____00008[205]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[178], x____00009[18], x____00009[37], x____00009[55], x____00009[72], x____00009[88], x____00009[103], x____00009[117], x____00009[130], x____00009[142], x____00009[153], x____00009[163], x____00009[172], x____00009[180], x____00009[187], x____00009[193], x____00009[198], x____00009[202], x____00009[205]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[198], x____00010[18], x____00010[37], x____00010[55], x____00010[72], x____00010[88], x____00010[103], x____00010[117], x____00010[130], x____00010[142], x____00010[153], x____00010[163], x____00010[172], x____00010[180], x____00010[187], x____00010[193], x____00010[198], x____00010[202], x____00010[205]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[218], x____00011[18], x____00011[37], x____00011[55], x____00011[72], x____00011[88], x____00011[103], x____00011[117], x____00011[130], x____00011[142], x____00011[153], x____00011[163], x____00011[172], x____00011[180], x____00011[187], x____00011[193], x____00011[198], x____00011[202], x____00011[205]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[238], x____00012[18], x____00012[37], x____00012[55], x____00012[72], x____00012[88], x____00012[103], x____00012[117], x____00012[130], x____00012[142], x____00012[153], x____00012[163], x____00012[172], x____00012[180], x____00012[187], x____00012[193], x____00012[198], x____00012[202], x____00012[205]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[258], x____00013[18], x____00013[37], x____00013[55], x____00013[72], x____00013[88], x____00013[103], x____00013[117], x____00013[130], x____00013[142], x____00013[153], x____00013[163], x____00013[172], x____00013[180], x____00013[187], x____00013[193], x____00013[198], x____00013[202], x____00013[205]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[278], x____00014[18], x____00014[37], x____00014[55], x____00014[72], x____00014[88], x____00014[103], x____00014[117], x____00014[130], x____00014[142], x____00014[153], x____00014[163], x____00014[172], x____00014[180], x____00014[187], x____00014[193], x____00014[198], x____00014[202], x____00014[205]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[298], x____00015[18], x____00015[37], x____00015[55], x____00015[72], x____00015[88], x____00015[103], x____00015[117], x____00015[130], x____00015[142], x____00015[153], x____00015[163], x____00015[172], x____00015[180], x____00015[187], x____00015[193], x____00015[198], x____00015[202], x____00015[205]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[318], x____00016[18], x____00016[37], x____00016[55], x____00016[72], x____00016[88], x____00016[103], x____00016[117], x____00016[130], x____00016[142], x____00016[153], x____00016[163], x____00016[172], x____00016[180], x____00016[187], x____00016[193], x____00016[198], x____00016[202], x____00016[205]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[338], x____00017[18], x____00017[37], x____00017[55], x____00017[72], x____00017[88], x____00017[103], x____00017[117], x____00017[130], x____00017[142], x____00017[153], x____00017[163], x____00017[172], x____00017[180], x____00017[187], x____00017[193], x____00017[198], x____00017[202], x____00017[205]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[358], x____00018[18], x____00018[37], x____00018[55], x____00018[72], x____00018[88], x____00018[103], x____00018[117], x____00018[130], x____00018[142], x____00018[153], x____00018[163], x____00018[172], x____00018[180], x____00018[187], x____00018[193], x____00018[198], x____00018[202], x____00018[205]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[378], x____00019[18], x____00019[37], x____00019[55], x____00019[72], x____00019[88], x____00019[103], x____00019[117], x____00019[130], x____00019[142], x____00019[153], x____00019[163], x____00019[172], x____00019[180], x____00019[187], x____00019[193], x____00019[198], x____00019[202], x____00019[205]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[398], x____00020[18], x____00020[37], x____00020[55], x____00020[72], x____00020[88], x____00020[103], x____00020[117], x____00020[130], x____00020[142], x____00020[153], x____00020[163], x____00020[172], x____00020[180], x____00020[187], x____00020[193], x____00020[198], x____00020[202], x____00020[205]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[19], x____00001[19], x____00001[38], x____00001[56], x____00001[73], x____00001[89], x____00001[104], x____00001[118], x____00001[131], x____00001[143], x____00001[154], x____00001[164], x____00001[173], x____00001[181], x____00001[188], x____00001[194], x____00001[199], x____00001[203], x____00001[206], x____00001[208]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[39], x____00002[19], x____00002[38], x____00002[56], x____00002[73], x____00002[89], x____00002[104], x____00002[118], x____00002[131], x____00002[143], x____00002[154], x____00002[164], x____00002[173], x____00002[181], x____00002[188], x____00002[194], x____00002[199], x____00002[203], x____00002[206], x____00002[208]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[59], x____00003[19], x____00003[38], x____00003[56], x____00003[73], x____00003[89], x____00003[104], x____00003[118], x____00003[131], x____00003[143], x____00003[154], x____00003[164], x____00003[173], x____00003[181], x____00003[188], x____00003[194], x____00003[199], x____00003[203], x____00003[206], x____00003[208]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[79], x____00004[19], x____00004[38], x____00004[56], x____00004[73], x____00004[89], x____00004[104], x____00004[118], x____00004[131], x____00004[143], x____00004[154], x____00004[164], x____00004[173], x____00004[181], x____00004[188], x____00004[194], x____00004[199], x____00004[203], x____00004[206], x____00004[208]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[99], x____00005[19], x____00005[38], x____00005[56], x____00005[73], x____00005[89], x____00005[104], x____00005[118], x____00005[131], x____00005[143], x____00005[154], x____00005[164], x____00005[173], x____00005[181], x____00005[188], x____00005[194], x____00005[199], x____00005[203], x____00005[206], x____00005[208]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[119], x____00006[19], x____00006[38], x____00006[56], x____00006[73], x____00006[89], x____00006[104], x____00006[118], x____00006[131], x____00006[143], x____00006[154], x____00006[164], x____00006[173], x____00006[181], x____00006[188], x____00006[194], x____00006[199], x____00006[203], x____00006[206], x____00006[208]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[139], x____00007[19], x____00007[38], x____00007[56], x____00007[73], x____00007[89], x____00007[104], x____00007[118], x____00007[131], x____00007[143], x____00007[154], x____00007[164], x____00007[173], x____00007[181], x____00007[188], x____00007[194], x____00007[199], x____00007[203], x____00007[206], x____00007[208]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[159], x____00008[19], x____00008[38], x____00008[56], x____00008[73], x____00008[89], x____00008[104], x____00008[118], x____00008[131], x____00008[143], x____00008[154], x____00008[164], x____00008[173], x____00008[181], x____00008[188], x____00008[194], x____00008[199], x____00008[203], x____00008[206], x____00008[208]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[179], x____00009[19], x____00009[38], x____00009[56], x____00009[73], x____00009[89], x____00009[104], x____00009[118], x____00009[131], x____00009[143], x____00009[154], x____00009[164], x____00009[173], x____00009[181], x____00009[188], x____00009[194], x____00009[199], x____00009[203], x____00009[206], x____00009[208]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[199], x____00010[19], x____00010[38], x____00010[56], x____00010[73], x____00010[89], x____00010[104], x____00010[118], x____00010[131], x____00010[143], x____00010[154], x____00010[164], x____00010[173], x____00010[181], x____00010[188], x____00010[194], x____00010[199], x____00010[203], x____00010[206], x____00010[208]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[219], x____00011[19], x____00011[38], x____00011[56], x____00011[73], x____00011[89], x____00011[104], x____00011[118], x____00011[131], x____00011[143], x____00011[154], x____00011[164], x____00011[173], x____00011[181], x____00011[188], x____00011[194], x____00011[199], x____00011[203], x____00011[206], x____00011[208]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[239], x____00012[19], x____00012[38], x____00012[56], x____00012[73], x____00012[89], x____00012[104], x____00012[118], x____00012[131], x____00012[143], x____00012[154], x____00012[164], x____00012[173], x____00012[181], x____00012[188], x____00012[194], x____00012[199], x____00012[203], x____00012[206], x____00012[208]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[259], x____00013[19], x____00013[38], x____00013[56], x____00013[73], x____00013[89], x____00013[104], x____00013[118], x____00013[131], x____00013[143], x____00013[154], x____00013[164], x____00013[173], x____00013[181], x____00013[188], x____00013[194], x____00013[199], x____00013[203], x____00013[206], x____00013[208]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[279], x____00014[19], x____00014[38], x____00014[56], x____00014[73], x____00014[89], x____00014[104], x____00014[118], x____00014[131], x____00014[143], x____00014[154], x____00014[164], x____00014[173], x____00014[181], x____00014[188], x____00014[194], x____00014[199], x____00014[203], x____00014[206], x____00014[208]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[299], x____00015[19], x____00015[38], x____00015[56], x____00015[73], x____00015[89], x____00015[104], x____00015[118], x____00015[131], x____00015[143], x____00015[154], x____00015[164], x____00015[173], x____00015[181], x____00015[188], x____00015[194], x____00015[199], x____00015[203], x____00015[206], x____00015[208]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[319], x____00016[19], x____00016[38], x____00016[56], x____00016[73], x____00016[89], x____00016[104], x____00016[118], x____00016[131], x____00016[143], x____00016[154], x____00016[164], x____00016[173], x____00016[181], x____00016[188], x____00016[194], x____00016[199], x____00016[203], x____00016[206], x____00016[208]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[339], x____00017[19], x____00017[38], x____00017[56], x____00017[73], x____00017[89], x____00017[104], x____00017[118], x____00017[131], x____00017[143], x____00017[154], x____00017[164], x____00017[173], x____00017[181], x____00017[188], x____00017[194], x____00017[199], x____00017[203], x____00017[206], x____00017[208]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[359], x____00018[19], x____00018[38], x____00018[56], x____00018[73], x____00018[89], x____00018[104], x____00018[118], x____00018[131], x____00018[143], x____00018[154], x____00018[164], x____00018[173], x____00018[181], x____00018[188], x____00018[194], x____00018[199], x____00018[203], x____00018[206], x____00018[208]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[379], x____00019[19], x____00019[38], x____00019[56], x____00019[73], x____00019[89], x____00019[104], x____00019[118], x____00019[131], x____00019[143], x____00019[154], x____00019[164], x____00019[173], x____00019[181], x____00019[188], x____00019[194], x____00019[199], x____00019[203], x____00019[206], x____00019[208]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[399], x____00020[19], x____00020[38], x____00020[56], x____00020[73], x____00020[89], x____00020[104], x____00020[118], x____00020[131], x____00020[143], x____00020[154], x____00020[164], x____00020[173], x____00020[181], x____00020[188], x____00020[194], x____00020[199], x____00020[203], x____00020[206], x____00020[208]], 0);
constraint int_lin_eq([-1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [INT____00021, bin[1], bin[2], bin[3], bin[4], bin[5], bin[6], bin[7], bin[8], bin[9], bin[10], bin[11], bin[12], bin[13], bin[14], bin[15], bin[16], bin[17], bin[18], bin[19], bin[20]], 0) :: defines_var(INT____00021);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[20], x____00001[20], x____00001[39], x____00001[57], x____00001[74], x____00001[90], x____00001[105], x____00001[119], x____00001[132], x____00001[144], x____00001[155], x____00001[165], x____00001[174], x____00001[182], x____00001[189], x____00001[195], x____00001[200], x____00001[204], x____00001[207], x____00001[209], x____00001[210]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[40], x____00002[20], x____00002[39], x____00002[57], x____00002[74], x____00002[90], x____00002[105], x____00002[119], x____00002[132], x____00002[144], x____00002[155], x____00002[165], x____00002[174], x____00002[182], x____00002[189], x____00002[195], x____00002[200], x____00002[204], x____00002[207], x____00002[209], x____00002[210]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[60], x____00003[20], x____00003[39], x____00003[57], x____00003[74], x____00003[90], x____00003[105], x____00003[119], x____00003[132], x____00003[144], x____00003[155], x____00003[165], x____00003[174], x____00003[182], x____00003[189], x____00003[195], x____00003[200], x____00003[204], x____00003[207], x____00003[209], x____00003[210]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[80], x____00004[20], x____00004[39], x____00004[57], x____00004[74], x____00004[90], x____00004[105], x____00004[119], x____00004[132], x____00004[144], x____00004[155], x____00004[165], x____00004[174], x____00004[182], x____00004[189], x____00004[195], x____00004[200], x____00004[204], x____00004[207], x____00004[209], x____00004[210]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[100], x____00005[20], x____00005[39], x____00005[57], x____00005[74], x____00005[90], x____00005[105], x____00005[119], x____00005[132], x____00005[144], x____00005[155], x____00005[165], x____00005[174], x____00005[182], x____00005[189], x____00005[195], x____00005[200], x____00005[204], x____00005[207], x____00005[209], x____00005[210]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[120], x____00006[20], x____00006[39], x____00006[57], x____00006[74], x____00006[90], x____00006[105], x____00006[119], x____00006[132], x____00006[144], x____00006[155], x____00006[165], x____00006[174], x____00006[182], x____00006[189], x____00006[195], x____00006[200], x____00006[204], x____00006[207], x____00006[209], x____00006[210]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[140], x____00007[20], x____00007[39], x____00007[57], x____00007[74], x____00007[90], x____00007[105], x____00007[119], x____00007[132], x____00007[144], x____00007[155], x____00007[165], x____00007[174], x____00007[182], x____00007[189], x____00007[195], x____00007[200], x____00007[204], x____00007[207], x____00007[209], x____00007[210]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[160], x____00008[20], x____00008[39], x____00008[57], x____00008[74], x____00008[90], x____00008[105], x____00008[119], x____00008[132], x____00008[144], x____00008[155], x____00008[165], x____00008[174], x____00008[182], x____00008[189], x____00008[195], x____00008[200], x____00008[204], x____00008[207], x____00008[209], x____00008[210]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[180], x____00009[20], x____00009[39], x____00009[57], x____00009[74], x____00009[90], x____00009[105], x____00009[119], x____00009[132], x____00009[144], x____00009[155], x____00009[165], x____00009[174], x____00009[182], x____00009[189], x____00009[195], x____00009[200], x____00009[204], x____00009[207], x____00009[209], x____00009[210]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[200], x____00010[20], x____00010[39], x____00010[57], x____00010[74], x____00010[90], x____00010[105], x____00010[119], x____00010[132], x____00010[144], x____00010[155], x____00010[165], x____00010[174], x____00010[182], x____00010[189], x____00010[195], x____00010[200], x____00010[204], x____00010[207], x____00010[209], x____00010[210]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[220], x____00011[20], x____00011[39], x____00011[57], x____00011[74], x____00011[90], x____00011[105], x____00011[119], x____00011[132], x____00011[144], x____00011[155], x____00011[165], x____00011[174], x____00011[182], x____00011[189], x____00011[195], x____00011[200], x____00011[204], x____00011[207], x____00011[209], x____00011[210]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[240], x____00012[20], x____00012[39], x____00012[57], x____00012[74], x____00012[90], x____00012[105], x____00012[119], x____00012[132], x____00012[144], x____00012[155], x____00012[165], x____00012[174], x____00012[182], x____00012[189], x____00012[195], x____00012[200], x____00012[204], x____00012[207], x____00012[209], x____00012[210]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[260], x____00013[20], x____00013[39], x____00013[57], x____00013[74], x____00013[90], x____00013[105], x____00013[119], x____00013[132], x____00013[144], x____00013[155], x____00013[165], x____00013[174], x____00013[182], x____00013[189], x____00013[195], x____00013[200], x____00013[204], x____00013[207], x____00013[209], x____00013[210]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[280], x____00014[20], x____00014[39], x____00014[57], x____00014[74], x____00014[90], x____00014[105], x____00014[119], x____00014[132], x____00014[144], x____00014[155], x____00014[165], x____00014[174], x____00014[182], x____00014[189], x____00014[195], x____00014[200], x____00014[204], x____00014[207], x____00014[209], x____00014[210]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[300], x____00015[20], x____00015[39], x____00015[57], x____00015[74], x____00015[90], x____00015[105], x____00015[119], x____00015[132], x____00015[144], x____00015[155], x____00015[165], x____00015[174], x____00015[182], x____00015[189], x____00015[195], x____00015[200], x____00015[204], x____00015[207], x____00015[209], x____00015[210]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[320], x____00016[20], x____00016[39], x____00016[57], x____00016[74], x____00016[90], x____00016[105], x____00016[119], x____00016[132], x____00016[144], x____00016[155], x____00016[165], x____00016[174], x____00016[182], x____00016[189], x____00016[195], x____00016[200], x____00016[204], x____00016[207], x____00016[209], x____00016[210]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[340], x____00017[20], x____00017[39], x____00017[57], x____00017[74], x____00017[90], x____00017[105], x____00017[119], x____00017[132], x____00017[144], x____00017[155], x____00017[165], x____00017[174], x____00017[182], x____00017[189], x____00017[195], x____00017[200], x____00017[204], x____00017[207], x____00017[209], x____00017[210]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[360], x____00018[20], x____00018[39], x____00018[57], x____00018[74], x____00018[90], x____00018[105], x____00018[119], x____00018[132], x____00018[144], x____00018[155], x____00018[165], x____00018[174], x____00018[182], x____00018[189], x____00018[195], x____00018[200], x____00018[204], x____00018[207], x____00018[209], x____00018[210]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[380], x____00019[20], x____00019[39], x____00019[57], x____00019[74], x____00019[90], x____00019[105], x____00019[119], x____00019[132], x____00019[144], x____00019[155], x____00019[165], x____00019[174], x____00019[182], x____00019[189], x____00019[195], x____00019[200], x____00019[204], x____00019[207], x____00019[209], x____00019[210]], 0);
constraint int_lin_eq([1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[400], x____00020[20], x____00020[39], x____00020[57], x____00020[74], x____00020[90], x____00020[105], x____00020[119], x____00020[132], x____00020[144], x____00020[155], x____00020[165], x____00020[174], x____00020[182], x____00020[189], x____00020[195], x____00020[200], x____00020[204], x____00020[207], x____00020[209], x____00020[210]], 0);
constraint int_lin_le([-9], [x____00001[210]], 0);
constraint int_lin_le([-9], [x____00002[210]], 0);
constraint int_lin_le([-9], [x____00003[210]], 0);
constraint int_lin_le([-9], [x____00004[210]], 0);
constraint int_lin_le([-9], [x____00005[210]], 0);
constraint int_lin_le([-9], [x____00006[210]], 0);
constraint int_lin_le([-9], [x____00007[210]], 0);
constraint int_lin_le([-9], [x____00008[210]], 0);
constraint int_lin_le([-9], [x____00009[210]], 0);
constraint int_lin_le([-9], [x____00010[210]], 0);
constraint int_lin_le([-9], [x____00011[210]], 0);
constraint int_lin_le([-9], [x____00012[210]], 0);
constraint int_lin_le([-9], [x____00013[210]], 0);
constraint int_lin_le([-9], [x____00014[210]], 0);
constraint int_lin_le([-9], [x____00015[210]], 0);
constraint int_lin_le([-9], [x____00016[210]], 0);
constraint int_lin_le([-9], [x____00017[210]], 0);
constraint int_lin_le([-9], [x____00018[210]], 0);
constraint int_lin_le([-9], [x____00019[210]], 0);
constraint int_lin_le([-9], [x____00020[210]], 0);
constraint int_lin_le([-8, 1], [x____00001[208], x____00001[209]], 0);
constraint int_lin_le([-8, 1], [x____00002[208], x____00002[209]], 0);
constraint int_lin_le([-8, 1], [x____00003[208], x____00003[209]], 0);
constraint int_lin_le([-8, 1], [x____00004[208], x____00004[209]], 0);
constraint int_lin_le([-8, 1], [x____00005[208], x____00005[209]], 0);
constraint int_lin_le([-8, 1], [x____00006[208], x____00006[209]], 0);
constraint int_lin_le([-8, 1], [x____00007[208], x____00007[209]], 0);
constraint int_lin_le([-8, 1], [x____00008[208], x____00008[209]], 0);
constraint int_lin_le([-8, 1], [x____00009[208], x____00009[209]], 0);
constraint int_lin_le([-8, 1], [x____00010[208], x____00010[209]], 0);
constraint int_lin_le([-8, 1], [x____00011[208], x____00011[209]], 0);
constraint int_lin_le([-8, 1], [x____00012[208], x____00012[209]], 0);
constraint int_lin_le([-8, 1], [x____00013[208], x____00013[209]], 0);
constraint int_lin_le([-8, 1], [x____00014[208], x____00014[209]], 0);
constraint int_lin_le([-8, 1], [x____00015[208], x____00015[209]], 0);
constraint int_lin_le([-8, 1], [x____00016[208], x____00016[209]], 0);
constraint int_lin_le([-8, 1], [x____00017[208], x____00017[209]], 0);
constraint int_lin_le([-8, 1], [x____00018[208], x____00018[209]], 0);
constraint int_lin_le([-8, 1], [x____00019[208], x____00019[209]], 0);
constraint int_lin_le([-8, 1], [x____00020[208], x____00020[209]], 0);
constraint int_lin_le([-3, 2, 1], [x____00001[205], x____00001[206], x____00001[207]], 0);
constraint int_lin_le([-3, 2, 1], [x____00002[205], x____00002[206], x____00002[207]], 0);
constraint int_lin_le([-3, 2, 1], [x____00003[205], x____00003[206], x____00003[207]], 0);
constraint int_lin_le([-3, 2, 1], [x____00004[205], x____00004[206], x____00004[207]], 0);
constraint int_lin_le([-3, 2, 1], [x____00005[205], x____00005[206], x____00005[207]], 0);
constraint int_lin_le([-3, 2, 1], [x____00006[205], x____00006[206], x____00006[207]], 0);
constraint int_lin_le([-3, 2, 1], [x____00007[205], x____00007[206], x____00007[207]], 0);
constraint int_lin_le([-3, 2, 1], [x____00008[205], x____00008[206], x____00008[207]], 0);
constraint int_lin_le([-3, 2, 1], [x____00009[205], x____00009[206], x____00009[207]], 0);
constraint int_lin_le([-3, 2, 1], [x____00010[205], x____00010[206], x____00010[207]], 0);
constraint int_lin_le([-3, 2, 1], [x____00011[205], x____00011[206], x____00011[207]], 0);
constraint int_lin_le([-3, 2, 1], [x____00012[205], x____00012[206], x____00012[207]], 0);
constraint int_lin_le([-3, 2, 1], [x____00013[205], x____00013[206], x____00013[207]], 0);
constraint int_lin_le([-3, 2, 1], [x____00014[205], x____00014[206], x____00014[207]], 0);
constraint int_lin_le([-3, 2, 1], [x____00015[205], x____00015[206], x____00015[207]], 0);
constraint int_lin_le([-3, 2, 1], [x____00016[205], x____00016[206], x____00016[207]], 0);
constraint int_lin_le([-3, 2, 1], [x____00017[205], x____00017[206], x____00017[207]], 0);
constraint int_lin_le([-3, 2, 1], [x____00018[205], x____00018[206], x____00018[207]], 0);
constraint int_lin_le([-3, 2, 1], [x____00019[205], x____00019[206], x____00019[207]], 0);
constraint int_lin_le([-3, 2, 1], [x____00020[205], x____00020[206], x____00020[207]], 0);
constraint int_lin_le([-6, 7, 2, 1], [x____00001[201], x____00001[202], x____00001[203], x____00001[204]], 0);
constraint int_lin_le([-6, 7, 2, 1], [x____00002[201], x____00002[202], x____00002[203], x____00002[204]], 0);
constraint int_lin_le([-6, 7, 2, 1], [x____00003[201], x____00003[202], x____00003[203], x____00003[204]], 0);
constraint int_lin_le([-6, 7, 2, 1], [x____00004[201], x____00004[202], x____00004[203], x____00004[204]], 0);
constraint int_lin_le([-6, 7, 2, 1], [x____00005[201], x____00005[202], x____00005[203], x____00005[204]], 0);
constraint int_lin_le([-6, 7, 2, 1], [x____00006[201], x____00006[202], x____00006[203], x____00006[204]], 0);
constraint int_lin_le([-6, 7, 2, 1], [x____00007[201], x____00007[202], x____00007[203], x____00007[204]], 0);
constraint int_lin_le([-6, 7, 2, 1], [x____00008[201], x____00008[202], x____00008[203], x____00008[204]], 0);
constraint int_lin_le([-6, 7, 2, 1], [x____00009[201], x____00009[202], x____00009[203], x____00009[204]], 0);
constraint int_lin_le([-6, 7, 2, 1], [x____00010[201], x____00010[202], x____00010[203], x____00010[204]], 0);
constraint int_lin_le([-6, 7, 2, 1], [x____00011[201], x____00011[202], x____00011[203], x____00011[204]], 0);
constraint int_lin_le([-6, 7, 2, 1], [x____00012[201], x____00012[202], x____00012[203], x____00012[204]], 0);
constraint int_lin_le([-6, 7, 2, 1], [x____00013[201], x____00013[202], x____00013[203], x____00013[204]], 0);
constraint int_lin_le([-6, 7, 2, 1], [x____00014[201], x____00014[202], x____00014[203], x____00014[204]], 0);
constraint int_lin_le([-6, 7, 2, 1], [x____00015[201], x____00015[202], x____00015[203], x____00015[204]], 0);
constraint int_lin_le([-6, 7, 2, 1], [x____00016[201], x____00016[202], x____00016[203], x____00016[204]], 0);
constraint int_lin_le([-6, 7, 2, 1], [x____00017[201], x____00017[202], x____00017[203], x____00017[204]], 0);
constraint int_lin_le([-6, 7, 2, 1], [x____00018[201], x____00018[202], x____00018[203], x____00018[204]], 0);
constraint int_lin_le([-6, 7, 2, 1], [x____00019[201], x____00019[202], x____00019[203], x____00019[204]], 0);
constraint int_lin_le([-6, 7, 2, 1], [x____00020[201], x____00020[202], x____00020[203], x____00020[204]], 0);
constraint int_lin_le([-5, 4, 7, 2, 1], [x____00001[196], x____00001[197], x____00001[198], x____00001[199], x____00001[200]], 0);
constraint int_lin_le([-5, 4, 7, 2, 1], [x____00002[196], x____00002[197], x____00002[198], x____00002[199], x____00002[200]], 0);
constraint int_lin_le([-5, 4, 7, 2, 1], [x____00003[196], x____00003[197], x____00003[198], x____00003[199], x____00003[200]], 0);
constraint int_lin_le([-5, 4, 7, 2, 1], [x____00004[196], x____00004[197], x____00004[198], x____00004[199], x____00004[200]], 0);
constraint int_lin_le([-5, 4, 7, 2, 1], [x____00005[196], x____00005[197], x____00005[198], x____00005[199], x____00005[200]], 0);
constraint int_lin_le([-5, 4, 7, 2, 1], [x____00006[196], x____00006[197], x____00006[198], x____00006[199], x____00006[200]], 0);
constraint int_lin_le([-5, 4, 7, 2, 1], [x____00007[196], x____00007[197], x____00007[198], x____00007[199], x____00007[200]], 0);
constraint int_lin_le([-5, 4, 7, 2, 1], [x____00008[196], x____00008[197], x____00008[198], x____00008[199], x____00008[200]], 0);
constraint int_lin_le([-5, 4, 7, 2, 1], [x____00009[196], x____00009[197], x____00009[198], x____00009[199], x____00009[200]], 0);
constraint int_lin_le([-5, 4, 7, 2, 1], [x____00010[196], x____00010[197], x____00010[198], x____00010[199], x____00010[200]], 0);
constraint int_lin_le([-5, 4, 7, 2, 1], [x____00011[196], x____00011[197], x____00011[198], x____00011[199], x____00011[200]], 0);
constraint int_lin_le([-5, 4, 7, 2, 1], [x____00012[196], x____00012[197], x____00012[198], x____00012[199], x____00012[200]], 0);
constraint int_lin_le([-5, 4, 7, 2, 1], [x____00013[196], x____00013[197], x____00013[198], x____00013[199], x____00013[200]], 0);
constraint int_lin_le([-5, 4, 7, 2, 1], [x____00014[196], x____00014[197], x____00014[198], x____00014[199], x____00014[200]], 0);
constraint int_lin_le([-5, 4, 7, 2, 1], [x____00015[196], x____00015[197], x____00015[198], x____00015[199], x____00015[200]], 0);
constraint int_lin_le([-5, 4, 7, 2, 1], [x____00016[196], x____00016[197], x____00016[198], x____00016[199], x____00016[200]], 0);
constraint int_lin_le([-5, 4, 7, 2, 1], [x____00017[196], x____00017[197], x____00017[198], x____00017[199], x____00017[200]], 0);
constraint int_lin_le([-5, 4, 7, 2, 1], [x____00018[196], x____00018[197], x____00018[198], x____00018[199], x____00018[200]], 0);
constraint int_lin_le([-5, 4, 7, 2, 1], [x____00019[196], x____00019[197], x____00019[198], x____00019[199], x____00019[200]], 0);
constraint int_lin_le([-5, 4, 7, 2, 1], [x____00020[196], x____00020[197], x____00020[198], x____00020[199], x____00020[200]], 0);
constraint int_lin_le([-6, 5, 4, 7, 2, 1], [x____00001[190], x____00001[191], x____00001[192], x____00001[193], x____00001[194], x____00001[195]], 0);
constraint int_lin_le([-6, 5, 4, 7, 2, 1], [x____00002[190], x____00002[191], x____00002[192], x____00002[193], x____00002[194], x____00002[195]], 0);
constraint int_lin_le([-6, 5, 4, 7, 2, 1], [x____00003[190], x____00003[191], x____00003[192], x____00003[193], x____00003[194], x____00003[195]], 0);
constraint int_lin_le([-6, 5, 4, 7, 2, 1], [x____00004[190], x____00004[191], x____00004[192], x____00004[193], x____00004[194], x____00004[195]], 0);
constraint int_lin_le([-6, 5, 4, 7, 2, 1], [x____00005[190], x____00005[191], x____00005[192], x____00005[193], x____00005[194], x____00005[195]], 0);
constraint int_lin_le([-6, 5, 4, 7, 2, 1], [x____00006[190], x____00006[191], x____00006[192], x____00006[193], x____00006[194], x____00006[195]], 0);
constraint int_lin_le([-6, 5, 4, 7, 2, 1], [x____00007[190], x____00007[191], x____00007[192], x____00007[193], x____00007[194], x____00007[195]], 0);
constraint int_lin_le([-6, 5, 4, 7, 2, 1], [x____00008[190], x____00008[191], x____00008[192], x____00008[193], x____00008[194], x____00008[195]], 0);
constraint int_lin_le([-6, 5, 4, 7, 2, 1], [x____00009[190], x____00009[191], x____00009[192], x____00009[193], x____00009[194], x____00009[195]], 0);
constraint int_lin_le([-6, 5, 4, 7, 2, 1], [x____00010[190], x____00010[191], x____00010[192], x____00010[193], x____00010[194], x____00010[195]], 0);
constraint int_lin_le([-6, 5, 4, 7, 2, 1], [x____00011[190], x____00011[191], x____00011[192], x____00011[193], x____00011[194], x____00011[195]], 0);
constraint int_lin_le([-6, 5, 4, 7, 2, 1], [x____00012[190], x____00012[191], x____00012[192], x____00012[193], x____00012[194], x____00012[195]], 0);
constraint int_lin_le([-6, 5, 4, 7, 2, 1], [x____00013[190], x____00013[191], x____00013[192], x____00013[193], x____00013[194], x____00013[195]], 0);
constraint int_lin_le([-6, 5, 4, 7, 2, 1], [x____00014[190], x____00014[191], x____00014[192], x____00014[193], x____00014[194], x____00014[195]], 0);
constraint int_lin_le([-6, 5, 4, 7, 2, 1], [x____00015[190], x____00015[191], x____00015[192], x____00015[193], x____00015[194], x____00015[195]], 0);
constraint int_lin_le([-6, 5, 4, 7, 2, 1], [x____00016[190], x____00016[191], x____00016[192], x____00016[193], x____00016[194], x____00016[195]], 0);
constraint int_lin_le([-6, 5, 4, 7, 2, 1], [x____00017[190], x____00017[191], x____00017[192], x____00017[193], x____00017[194], x____00017[195]], 0);
constraint int_lin_le([-6, 5, 4, 7, 2, 1], [x____00018[190], x____00018[191], x____00018[192], x____00018[193], x____00018[194], x____00018[195]], 0);
constraint int_lin_le([-6, 5, 4, 7, 2, 1], [x____00019[190], x____00019[191], x____00019[192], x____00019[193], x____00019[194], x____00019[195]], 0);
constraint int_lin_le([-6, 5, 4, 7, 2, 1], [x____00020[190], x____00020[191], x____00020[192], x____00020[193], x____00020[194], x____00020[195]], 0);
constraint int_lin_le([-1, 4, 5, 4, 7, 2, 1], [x____00001[183], x____00001[184], x____00001[185], x____00001[186], x____00001[187], x____00001[188], x____00001[189]], 0);
constraint int_lin_le([-1, 4, 5, 4, 7, 2, 1], [x____00002[183], x____00002[184], x____00002[185], x____00002[186], x____00002[187], x____00002[188], x____00002[189]], 0);
constraint int_lin_le([-1, 4, 5, 4, 7, 2, 1], [x____00003[183], x____00003[184], x____00003[185], x____00003[186], x____00003[187], x____00003[188], x____00003[189]], 0);
constraint int_lin_le([-1, 4, 5, 4, 7, 2, 1], [x____00004[183], x____00004[184], x____00004[185], x____00004[186], x____00004[187], x____00004[188], x____00004[189]], 0);
constraint int_lin_le([-1, 4, 5, 4, 7, 2, 1], [x____00005[183], x____00005[184], x____00005[185], x____00005[186], x____00005[187], x____00005[188], x____00005[189]], 0);
constraint int_lin_le([-1, 4, 5, 4, 7, 2, 1], [x____00006[183], x____00006[184], x____00006[185], x____00006[186], x____00006[187], x____00006[188], x____00006[189]], 0);
constraint int_lin_le([-1, 4, 5, 4, 7, 2, 1], [x____00007[183], x____00007[184], x____00007[185], x____00007[186], x____00007[187], x____00007[188], x____00007[189]], 0);
constraint int_lin_le([-1, 4, 5, 4, 7, 2, 1], [x____00008[183], x____00008[184], x____00008[185], x____00008[186], x____00008[187], x____00008[188], x____00008[189]], 0);
constraint int_lin_le([-1, 4, 5, 4, 7, 2, 1], [x____00009[183], x____00009[184], x____00009[185], x____00009[186], x____00009[187], x____00009[188], x____00009[189]], 0);
constraint int_lin_le([-1, 4, 5, 4, 7, 2, 1], [x____00010[183], x____00010[184], x____00010[185], x____00010[186], x____00010[187], x____00010[188], x____00010[189]], 0);
constraint int_lin_le([-1, 4, 5, 4, 7, 2, 1], [x____00011[183], x____00011[184], x____00011[185], x____00011[186], x____00011[187], x____00011[188], x____00011[189]], 0);
constraint int_lin_le([-1, 4, 5, 4, 7, 2, 1], [x____00012[183], x____00012[184], x____00012[185], x____00012[186], x____00012[187], x____00012[188], x____00012[189]], 0);
constraint int_lin_le([-1, 4, 5, 4, 7, 2, 1], [x____00013[183], x____00013[184], x____00013[185], x____00013[186], x____00013[187], x____00013[188], x____00013[189]], 0);
constraint int_lin_le([-1, 4, 5, 4, 7, 2, 1], [x____00014[183], x____00014[184], x____00014[185], x____00014[186], x____00014[187], x____00014[188], x____00014[189]], 0);
constraint int_lin_le([-1, 4, 5, 4, 7, 2, 1], [x____00015[183], x____00015[184], x____00015[185], x____00015[186], x____00015[187], x____00015[188], x____00015[189]], 0);
constraint int_lin_le([-1, 4, 5, 4, 7, 2, 1], [x____00016[183], x____00016[184], x____00016[185], x____00016[186], x____00016[187], x____00016[188], x____00016[189]], 0);
constraint int_lin_le([-1, 4, 5, 4, 7, 2, 1], [x____00017[183], x____00017[184], x____00017[185], x____00017[186], x____00017[187], x____00017[188], x____00017[189]], 0);
constraint int_lin_le([-1, 4, 5, 4, 7, 2, 1], [x____00018[183], x____00018[184], x____00018[185], x____00018[186], x____00018[187], x____00018[188], x____00018[189]], 0);
constraint int_lin_le([-1, 4, 5, 4, 7, 2, 1], [x____00019[183], x____00019[184], x____00019[185], x____00019[186], x____00019[187], x____00019[188], x____00019[189]], 0);
constraint int_lin_le([-1, 4, 5, 4, 7, 2, 1], [x____00020[183], x____00020[184], x____00020[185], x____00020[186], x____00020[187], x____00020[188], x____00020[189]], 0);
constraint int_lin_le([-8, 9, 4, 5, 4, 7, 2, 1], [x____00001[175], x____00001[176], x____00001[177], x____00001[178], x____00001[179], x____00001[180], x____00001[181], x____00001[182]], 0);
constraint int_lin_le([-8, 9, 4, 5, 4, 7, 2, 1], [x____00002[175], x____00002[176], x____00002[177], x____00002[178], x____00002[179], x____00002[180], x____00002[181], x____00002[182]], 0);
constraint int_lin_le([-8, 9, 4, 5, 4, 7, 2, 1], [x____00003[175], x____00003[176], x____00003[177], x____00003[178], x____00003[179], x____00003[180], x____00003[181], x____00003[182]], 0);
constraint int_lin_le([-8, 9, 4, 5, 4, 7, 2, 1], [x____00004[175], x____00004[176], x____00004[177], x____00004[178], x____00004[179], x____00004[180], x____00004[181], x____00004[182]], 0);
constraint int_lin_le([-8, 9, 4, 5, 4, 7, 2, 1], [x____00005[175], x____00005[176], x____00005[177], x____00005[178], x____00005[179], x____00005[180], x____00005[181], x____00005[182]], 0);
constraint int_lin_le([-8, 9, 4, 5, 4, 7, 2, 1], [x____00006[175], x____00006[176], x____00006[177], x____00006[178], x____00006[179], x____00006[180], x____00006[181], x____00006[182]], 0);
constraint int_lin_le([-8, 9, 4, 5, 4, 7, 2, 1], [x____00007[175], x____00007[176], x____00007[177], x____00007[178], x____00007[179], x____00007[180], x____00007[181], x____00007[182]], 0);
constraint int_lin_le([-8, 9, 4, 5, 4, 7, 2, 1], [x____00008[175], x____00008[176], x____00008[177], x____00008[178], x____00008[179], x____00008[180], x____00008[181], x____00008[182]], 0);
constraint int_lin_le([-8, 9, 4, 5, 4, 7, 2, 1], [x____00009[175], x____00009[176], x____00009[177], x____00009[178], x____00009[179], x____00009[180], x____00009[181], x____00009[182]], 0);
constraint int_lin_le([-8, 9, 4, 5, 4, 7, 2, 1], [x____00010[175], x____00010[176], x____00010[177], x____00010[178], x____00010[179], x____00010[180], x____00010[181], x____00010[182]], 0);
constraint int_lin_le([-8, 9, 4, 5, 4, 7, 2, 1], [x____00011[175], x____00011[176], x____00011[177], x____00011[178], x____00011[179], x____00011[180], x____00011[181], x____00011[182]], 0);
constraint int_lin_le([-8, 9, 4, 5, 4, 7, 2, 1], [x____00012[175], x____00012[176], x____00012[177], x____00012[178], x____00012[179], x____00012[180], x____00012[181], x____00012[182]], 0);
constraint int_lin_le([-8, 9, 4, 5, 4, 7, 2, 1], [x____00013[175], x____00013[176], x____00013[177], x____00013[178], x____00013[179], x____00013[180], x____00013[181], x____00013[182]], 0);
constraint int_lin_le([-8, 9, 4, 5, 4, 7, 2, 1], [x____00014[175], x____00014[176], x____00014[177], x____00014[178], x____00014[179], x____00014[180], x____00014[181], x____00014[182]], 0);
constraint int_lin_le([-8, 9, 4, 5, 4, 7, 2, 1], [x____00015[175], x____00015[176], x____00015[177], x____00015[178], x____00015[179], x____00015[180], x____00015[181], x____00015[182]], 0);
constraint int_lin_le([-8, 9, 4, 5, 4, 7, 2, 1], [x____00016[175], x____00016[176], x____00016[177], x____00016[178], x____00016[179], x____00016[180], x____00016[181], x____00016[182]], 0);
constraint int_lin_le([-8, 9, 4, 5, 4, 7, 2, 1], [x____00017[175], x____00017[176], x____00017[177], x____00017[178], x____00017[179], x____00017[180], x____00017[181], x____00017[182]], 0);
constraint int_lin_le([-8, 9, 4, 5, 4, 7, 2, 1], [x____00018[175], x____00018[176], x____00018[177], x____00018[178], x____00018[179], x____00018[180], x____00018[181], x____00018[182]], 0);
constraint int_lin_le([-8, 9, 4, 5, 4, 7, 2, 1], [x____00019[175], x____00019[176], x____00019[177], x____00019[178], x____00019[179], x____00019[180], x____00019[181], x____00019[182]], 0);
constraint int_lin_le([-8, 9, 4, 5, 4, 7, 2, 1], [x____00020[175], x____00020[176], x____00020[177], x____00020[178], x____00020[179], x____00020[180], x____00020[181], x____00020[182]], 0);
constraint int_lin_le([2, 9, 4, 5, 4, 7, 2, 1], [x____00001[167], x____00001[168], x____00001[169], x____00001[170], x____00001[171], x____00001[172], x____00001[173], x____00001[174]], 0);
constraint int_lin_le([2, 9, 4, 5, 4, 7, 2, 1], [x____00002[167], x____00002[168], x____00002[169], x____00002[170], x____00002[171], x____00002[172], x____00002[173], x____00002[174]], 0);
constraint int_lin_le([2, 9, 4, 5, 4, 7, 2, 1], [x____00003[167], x____00003[168], x____00003[169], x____00003[170], x____00003[171], x____00003[172], x____00003[173], x____00003[174]], 0);
constraint int_lin_le([2, 9, 4, 5, 4, 7, 2, 1], [x____00004[167], x____00004[168], x____00004[169], x____00004[170], x____00004[171], x____00004[172], x____00004[173], x____00004[174]], 0);
constraint int_lin_le([2, 9, 4, 5, 4, 7, 2, 1], [x____00005[167], x____00005[168], x____00005[169], x____00005[170], x____00005[171], x____00005[172], x____00005[173], x____00005[174]], 0);
constraint int_lin_le([2, 9, 4, 5, 4, 7, 2, 1], [x____00006[167], x____00006[168], x____00006[169], x____00006[170], x____00006[171], x____00006[172], x____00006[173], x____00006[174]], 0);
constraint int_lin_le([2, 9, 4, 5, 4, 7, 2, 1], [x____00007[167], x____00007[168], x____00007[169], x____00007[170], x____00007[171], x____00007[172], x____00007[173], x____00007[174]], 0);
constraint int_lin_le([2, 9, 4, 5, 4, 7, 2, 1], [x____00008[167], x____00008[168], x____00008[169], x____00008[170], x____00008[171], x____00008[172], x____00008[173], x____00008[174]], 0);
constraint int_lin_le([2, 9, 4, 5, 4, 7, 2, 1], [x____00009[167], x____00009[168], x____00009[169], x____00009[170], x____00009[171], x____00009[172], x____00009[173], x____00009[174]], 0);
constraint int_lin_le([2, 9, 4, 5, 4, 7, 2, 1], [x____00010[167], x____00010[168], x____00010[169], x____00010[170], x____00010[171], x____00010[172], x____00010[173], x____00010[174]], 0);
constraint int_lin_le([2, 9, 4, 5, 4, 7, 2, 1], [x____00011[167], x____00011[168], x____00011[169], x____00011[170], x____00011[171], x____00011[172], x____00011[173], x____00011[174]], 0);
constraint int_lin_le([2, 9, 4, 5, 4, 7, 2, 1], [x____00012[167], x____00012[168], x____00012[169], x____00012[170], x____00012[171], x____00012[172], x____00012[173], x____00012[174]], 0);
constraint int_lin_le([2, 9, 4, 5, 4, 7, 2, 1], [x____00013[167], x____00013[168], x____00013[169], x____00013[170], x____00013[171], x____00013[172], x____00013[173], x____00013[174]], 0);
constraint int_lin_le([2, 9, 4, 5, 4, 7, 2, 1], [x____00014[167], x____00014[168], x____00014[169], x____00014[170], x____00014[171], x____00014[172], x____00014[173], x____00014[174]], 0);
constraint int_lin_le([2, 9, 4, 5, 4, 7, 2, 1], [x____00015[167], x____00015[168], x____00015[169], x____00015[170], x____00015[171], x____00015[172], x____00015[173], x____00015[174]], 0);
constraint int_lin_le([2, 9, 4, 5, 4, 7, 2, 1], [x____00016[167], x____00016[168], x____00016[169], x____00016[170], x____00016[171], x____00016[172], x____00016[173], x____00016[174]], 0);
constraint int_lin_le([2, 9, 4, 5, 4, 7, 2, 1], [x____00017[167], x____00017[168], x____00017[169], x____00017[170], x____00017[171], x____00017[172], x____00017[173], x____00017[174]], 0);
constraint int_lin_le([2, 9, 4, 5, 4, 7, 2, 1], [x____00018[167], x____00018[168], x____00018[169], x____00018[170], x____00018[171], x____00018[172], x____00018[173], x____00018[174]], 0);
constraint int_lin_le([2, 9, 4, 5, 4, 7, 2, 1], [x____00019[167], x____00019[168], x____00019[169], x____00019[170], x____00019[171], x____00019[172], x____00019[173], x____00019[174]], 0);
constraint int_lin_le([2, 9, 4, 5, 4, 7, 2, 1], [x____00020[167], x____00020[168], x____00020[169], x____00020[170], x____00020[171], x____00020[172], x____00020[173], x____00020[174]], 0);
constraint int_lin_le([-3, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00001[156], x____00001[157], x____00001[158], x____00001[159], x____00001[160], x____00001[161], x____00001[162], x____00001[163], x____00001[164], x____00001[165]], 0);
constraint int_lin_le([-3, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00002[156], x____00002[157], x____00002[158], x____00002[159], x____00002[160], x____00002[161], x____00002[162], x____00002[163], x____00002[164], x____00002[165]], 0);
constraint int_lin_le([-3, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00003[156], x____00003[157], x____00003[158], x____00003[159], x____00003[160], x____00003[161], x____00003[162], x____00003[163], x____00003[164], x____00003[165]], 0);
constraint int_lin_le([-3, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00004[156], x____00004[157], x____00004[158], x____00004[159], x____00004[160], x____00004[161], x____00004[162], x____00004[163], x____00004[164], x____00004[165]], 0);
constraint int_lin_le([-3, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00005[156], x____00005[157], x____00005[158], x____00005[159], x____00005[160], x____00005[161], x____00005[162], x____00005[163], x____00005[164], x____00005[165]], 0);
constraint int_lin_le([-3, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00006[156], x____00006[157], x____00006[158], x____00006[159], x____00006[160], x____00006[161], x____00006[162], x____00006[163], x____00006[164], x____00006[165]], 0);
constraint int_lin_le([-3, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00007[156], x____00007[157], x____00007[158], x____00007[159], x____00007[160], x____00007[161], x____00007[162], x____00007[163], x____00007[164], x____00007[165]], 0);
constraint int_lin_le([-3, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00008[156], x____00008[157], x____00008[158], x____00008[159], x____00008[160], x____00008[161], x____00008[162], x____00008[163], x____00008[164], x____00008[165]], 0);
constraint int_lin_le([-3, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00009[156], x____00009[157], x____00009[158], x____00009[159], x____00009[160], x____00009[161], x____00009[162], x____00009[163], x____00009[164], x____00009[165]], 0);
constraint int_lin_le([-3, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00010[156], x____00010[157], x____00010[158], x____00010[159], x____00010[160], x____00010[161], x____00010[162], x____00010[163], x____00010[164], x____00010[165]], 0);
constraint int_lin_le([-3, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00011[156], x____00011[157], x____00011[158], x____00011[159], x____00011[160], x____00011[161], x____00011[162], x____00011[163], x____00011[164], x____00011[165]], 0);
constraint int_lin_le([-3, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00012[156], x____00012[157], x____00012[158], x____00012[159], x____00012[160], x____00012[161], x____00012[162], x____00012[163], x____00012[164], x____00012[165]], 0);
constraint int_lin_le([-3, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00013[156], x____00013[157], x____00013[158], x____00013[159], x____00013[160], x____00013[161], x____00013[162], x____00013[163], x____00013[164], x____00013[165]], 0);
constraint int_lin_le([-3, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00014[156], x____00014[157], x____00014[158], x____00014[159], x____00014[160], x____00014[161], x____00014[162], x____00014[163], x____00014[164], x____00014[165]], 0);
constraint int_lin_le([-3, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00015[156], x____00015[157], x____00015[158], x____00015[159], x____00015[160], x____00015[161], x____00015[162], x____00015[163], x____00015[164], x____00015[165]], 0);
constraint int_lin_le([-3, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00016[156], x____00016[157], x____00016[158], x____00016[159], x____00016[160], x____00016[161], x____00016[162], x____00016[163], x____00016[164], x____00016[165]], 0);
constraint int_lin_le([-3, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00017[156], x____00017[157], x____00017[158], x____00017[159], x____00017[160], x____00017[161], x____00017[162], x____00017[163], x____00017[164], x____00017[165]], 0);
constraint int_lin_le([-3, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00018[156], x____00018[157], x____00018[158], x____00018[159], x____00018[160], x____00018[161], x____00018[162], x____00018[163], x____00018[164], x____00018[165]], 0);
constraint int_lin_le([-3, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00019[156], x____00019[157], x____00019[158], x____00019[159], x____00019[160], x____00019[161], x____00019[162], x____00019[163], x____00019[164], x____00019[165]], 0);
constraint int_lin_le([-3, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00020[156], x____00020[157], x____00020[158], x____00020[159], x____00020[160], x____00020[161], x____00020[162], x____00020[163], x____00020[164], x____00020[165]], 0);
constraint int_lin_le([-5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00001[145], x____00001[146], x____00001[147], x____00001[148], x____00001[149], x____00001[150], x____00001[151], x____00001[152], x____00001[153], x____00001[154], x____00001[155]], 0);
constraint int_lin_le([-5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00002[145], x____00002[146], x____00002[147], x____00002[148], x____00002[149], x____00002[150], x____00002[151], x____00002[152], x____00002[153], x____00002[154], x____00002[155]], 0);
constraint int_lin_le([-5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00003[145], x____00003[146], x____00003[147], x____00003[148], x____00003[149], x____00003[150], x____00003[151], x____00003[152], x____00003[153], x____00003[154], x____00003[155]], 0);
constraint int_lin_le([-5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00004[145], x____00004[146], x____00004[147], x____00004[148], x____00004[149], x____00004[150], x____00004[151], x____00004[152], x____00004[153], x____00004[154], x____00004[155]], 0);
constraint int_lin_le([-5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00005[145], x____00005[146], x____00005[147], x____00005[148], x____00005[149], x____00005[150], x____00005[151], x____00005[152], x____00005[153], x____00005[154], x____00005[155]], 0);
constraint int_lin_le([-5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00006[145], x____00006[146], x____00006[147], x____00006[148], x____00006[149], x____00006[150], x____00006[151], x____00006[152], x____00006[153], x____00006[154], x____00006[155]], 0);
constraint int_lin_le([-5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00007[145], x____00007[146], x____00007[147], x____00007[148], x____00007[149], x____00007[150], x____00007[151], x____00007[152], x____00007[153], x____00007[154], x____00007[155]], 0);
constraint int_lin_le([-5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00008[145], x____00008[146], x____00008[147], x____00008[148], x____00008[149], x____00008[150], x____00008[151], x____00008[152], x____00008[153], x____00008[154], x____00008[155]], 0);
constraint int_lin_le([-5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00009[145], x____00009[146], x____00009[147], x____00009[148], x____00009[149], x____00009[150], x____00009[151], x____00009[152], x____00009[153], x____00009[154], x____00009[155]], 0);
constraint int_lin_le([-5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00010[145], x____00010[146], x____00010[147], x____00010[148], x____00010[149], x____00010[150], x____00010[151], x____00010[152], x____00010[153], x____00010[154], x____00010[155]], 0);
constraint int_lin_le([-5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00011[145], x____00011[146], x____00011[147], x____00011[148], x____00011[149], x____00011[150], x____00011[151], x____00011[152], x____00011[153], x____00011[154], x____00011[155]], 0);
constraint int_lin_le([-5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00012[145], x____00012[146], x____00012[147], x____00012[148], x____00012[149], x____00012[150], x____00012[151], x____00012[152], x____00012[153], x____00012[154], x____00012[155]], 0);
constraint int_lin_le([-5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00013[145], x____00013[146], x____00013[147], x____00013[148], x____00013[149], x____00013[150], x____00013[151], x____00013[152], x____00013[153], x____00013[154], x____00013[155]], 0);
constraint int_lin_le([-5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00014[145], x____00014[146], x____00014[147], x____00014[148], x____00014[149], x____00014[150], x____00014[151], x____00014[152], x____00014[153], x____00014[154], x____00014[155]], 0);
constraint int_lin_le([-5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00015[145], x____00015[146], x____00015[147], x____00015[148], x____00015[149], x____00015[150], x____00015[151], x____00015[152], x____00015[153], x____00015[154], x____00015[155]], 0);
constraint int_lin_le([-5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00016[145], x____00016[146], x____00016[147], x____00016[148], x____00016[149], x____00016[150], x____00016[151], x____00016[152], x____00016[153], x____00016[154], x____00016[155]], 0);
constraint int_lin_le([-5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00017[145], x____00017[146], x____00017[147], x____00017[148], x____00017[149], x____00017[150], x____00017[151], x____00017[152], x____00017[153], x____00017[154], x____00017[155]], 0);
constraint int_lin_le([-5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00018[145], x____00018[146], x____00018[147], x____00018[148], x____00018[149], x____00018[150], x____00018[151], x____00018[152], x____00018[153], x____00018[154], x____00018[155]], 0);
constraint int_lin_le([-5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00019[145], x____00019[146], x____00019[147], x____00019[148], x____00019[149], x____00019[150], x____00019[151], x____00019[152], x____00019[153], x____00019[154], x____00019[155]], 0);
constraint int_lin_le([-5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00020[145], x____00020[146], x____00020[147], x____00020[148], x____00020[149], x____00020[150], x____00020[151], x____00020[152], x____00020[153], x____00020[154], x____00020[155]], 0);
constraint int_lin_le([-9, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00001[133], x____00001[134], x____00001[135], x____00001[136], x____00001[137], x____00001[138], x____00001[139], x____00001[140], x____00001[141], x____00001[142], x____00001[143], x____00001[144]], 0);
constraint int_lin_le([-9, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00002[133], x____00002[134], x____00002[135], x____00002[136], x____00002[137], x____00002[138], x____00002[139], x____00002[140], x____00002[141], x____00002[142], x____00002[143], x____00002[144]], 0);
constraint int_lin_le([-9, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00003[133], x____00003[134], x____00003[135], x____00003[136], x____00003[137], x____00003[138], x____00003[139], x____00003[140], x____00003[141], x____00003[142], x____00003[143], x____00003[144]], 0);
constraint int_lin_le([-9, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00004[133], x____00004[134], x____00004[135], x____00004[136], x____00004[137], x____00004[138], x____00004[139], x____00004[140], x____00004[141], x____00004[142], x____00004[143], x____00004[144]], 0);
constraint int_lin_le([-9, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00005[133], x____00005[134], x____00005[135], x____00005[136], x____00005[137], x____00005[138], x____00005[139], x____00005[140], x____00005[141], x____00005[142], x____00005[143], x____00005[144]], 0);
constraint int_lin_le([-9, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00006[133], x____00006[134], x____00006[135], x____00006[136], x____00006[137], x____00006[138], x____00006[139], x____00006[140], x____00006[141], x____00006[142], x____00006[143], x____00006[144]], 0);
constraint int_lin_le([-9, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00007[133], x____00007[134], x____00007[135], x____00007[136], x____00007[137], x____00007[138], x____00007[139], x____00007[140], x____00007[141], x____00007[142], x____00007[143], x____00007[144]], 0);
constraint int_lin_le([-9, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00008[133], x____00008[134], x____00008[135], x____00008[136], x____00008[137], x____00008[138], x____00008[139], x____00008[140], x____00008[141], x____00008[142], x____00008[143], x____00008[144]], 0);
constraint int_lin_le([-9, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00009[133], x____00009[134], x____00009[135], x____00009[136], x____00009[137], x____00009[138], x____00009[139], x____00009[140], x____00009[141], x____00009[142], x____00009[143], x____00009[144]], 0);
constraint int_lin_le([-9, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00010[133], x____00010[134], x____00010[135], x____00010[136], x____00010[137], x____00010[138], x____00010[139], x____00010[140], x____00010[141], x____00010[142], x____00010[143], x____00010[144]], 0);
constraint int_lin_le([-9, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00011[133], x____00011[134], x____00011[135], x____00011[136], x____00011[137], x____00011[138], x____00011[139], x____00011[140], x____00011[141], x____00011[142], x____00011[143], x____00011[144]], 0);
constraint int_lin_le([-9, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00012[133], x____00012[134], x____00012[135], x____00012[136], x____00012[137], x____00012[138], x____00012[139], x____00012[140], x____00012[141], x____00012[142], x____00012[143], x____00012[144]], 0);
constraint int_lin_le([-9, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00013[133], x____00013[134], x____00013[135], x____00013[136], x____00013[137], x____00013[138], x____00013[139], x____00013[140], x____00013[141], x____00013[142], x____00013[143], x____00013[144]], 0);
constraint int_lin_le([-9, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00014[133], x____00014[134], x____00014[135], x____00014[136], x____00014[137], x____00014[138], x____00014[139], x____00014[140], x____00014[141], x____00014[142], x____00014[143], x____00014[144]], 0);
constraint int_lin_le([-9, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00015[133], x____00015[134], x____00015[135], x____00015[136], x____00015[137], x____00015[138], x____00015[139], x____00015[140], x____00015[141], x____00015[142], x____00015[143], x____00015[144]], 0);
constraint int_lin_le([-9, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00016[133], x____00016[134], x____00016[135], x____00016[136], x____00016[137], x____00016[138], x____00016[139], x____00016[140], x____00016[141], x____00016[142], x____00016[143], x____00016[144]], 0);
constraint int_lin_le([-9, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00017[133], x____00017[134], x____00017[135], x____00017[136], x____00017[137], x____00017[138], x____00017[139], x____00017[140], x____00017[141], x____00017[142], x____00017[143], x____00017[144]], 0);
constraint int_lin_le([-9, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00018[133], x____00018[134], x____00018[135], x____00018[136], x____00018[137], x____00018[138], x____00018[139], x____00018[140], x____00018[141], x____00018[142], x____00018[143], x____00018[144]], 0);
constraint int_lin_le([-9, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00019[133], x____00019[134], x____00019[135], x____00019[136], x____00019[137], x____00019[138], x____00019[139], x____00019[140], x____00019[141], x____00019[142], x____00019[143], x____00019[144]], 0);
constraint int_lin_le([-9, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00020[133], x____00020[134], x____00020[135], x____00020[136], x____00020[137], x____00020[138], x____00020[139], x____00020[140], x____00020[141], x____00020[142], x____00020[143], x____00020[144]], 0);
constraint int_lin_le([-9, 1, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00001[120], x____00001[121], x____00001[122], x____00001[123], x____00001[124], x____00001[125], x____00001[126], x____00001[127], x____00001[128], x____00001[129], x____00001[130], x____00001[131], x____00001[132]], 0);
constraint int_lin_le([-9, 1, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00002[120], x____00002[121], x____00002[122], x____00002[123], x____00002[124], x____00002[125], x____00002[126], x____00002[127], x____00002[128], x____00002[129], x____00002[130], x____00002[131], x____00002[132]], 0);
constraint int_lin_le([-9, 1, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00003[120], x____00003[121], x____00003[122], x____00003[123], x____00003[124], x____00003[125], x____00003[126], x____00003[127], x____00003[128], x____00003[129], x____00003[130], x____00003[131], x____00003[132]], 0);
constraint int_lin_le([-9, 1, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00004[120], x____00004[121], x____00004[122], x____00004[123], x____00004[124], x____00004[125], x____00004[126], x____00004[127], x____00004[128], x____00004[129], x____00004[130], x____00004[131], x____00004[132]], 0);
constraint int_lin_le([-9, 1, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00005[120], x____00005[121], x____00005[122], x____00005[123], x____00005[124], x____00005[125], x____00005[126], x____00005[127], x____00005[128], x____00005[129], x____00005[130], x____00005[131], x____00005[132]], 0);
constraint int_lin_le([-9, 1, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00006[120], x____00006[121], x____00006[122], x____00006[123], x____00006[124], x____00006[125], x____00006[126], x____00006[127], x____00006[128], x____00006[129], x____00006[130], x____00006[131], x____00006[132]], 0);
constraint int_lin_le([-9, 1, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00007[120], x____00007[121], x____00007[122], x____00007[123], x____00007[124], x____00007[125], x____00007[126], x____00007[127], x____00007[128], x____00007[129], x____00007[130], x____00007[131], x____00007[132]], 0);
constraint int_lin_le([-9, 1, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00008[120], x____00008[121], x____00008[122], x____00008[123], x____00008[124], x____00008[125], x____00008[126], x____00008[127], x____00008[128], x____00008[129], x____00008[130], x____00008[131], x____00008[132]], 0);
constraint int_lin_le([-9, 1, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00009[120], x____00009[121], x____00009[122], x____00009[123], x____00009[124], x____00009[125], x____00009[126], x____00009[127], x____00009[128], x____00009[129], x____00009[130], x____00009[131], x____00009[132]], 0);
constraint int_lin_le([-9, 1, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00010[120], x____00010[121], x____00010[122], x____00010[123], x____00010[124], x____00010[125], x____00010[126], x____00010[127], x____00010[128], x____00010[129], x____00010[130], x____00010[131], x____00010[132]], 0);
constraint int_lin_le([-9, 1, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00011[120], x____00011[121], x____00011[122], x____00011[123], x____00011[124], x____00011[125], x____00011[126], x____00011[127], x____00011[128], x____00011[129], x____00011[130], x____00011[131], x____00011[132]], 0);
constraint int_lin_le([-9, 1, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00012[120], x____00012[121], x____00012[122], x____00012[123], x____00012[124], x____00012[125], x____00012[126], x____00012[127], x____00012[128], x____00012[129], x____00012[130], x____00012[131], x____00012[132]], 0);
constraint int_lin_le([-9, 1, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00013[120], x____00013[121], x____00013[122], x____00013[123], x____00013[124], x____00013[125], x____00013[126], x____00013[127], x____00013[128], x____00013[129], x____00013[130], x____00013[131], x____00013[132]], 0);
constraint int_lin_le([-9, 1, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00014[120], x____00014[121], x____00014[122], x____00014[123], x____00014[124], x____00014[125], x____00014[126], x____00014[127], x____00014[128], x____00014[129], x____00014[130], x____00014[131], x____00014[132]], 0);
constraint int_lin_le([-9, 1, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00015[120], x____00015[121], x____00015[122], x____00015[123], x____00015[124], x____00015[125], x____00015[126], x____00015[127], x____00015[128], x____00015[129], x____00015[130], x____00015[131], x____00015[132]], 0);
constraint int_lin_le([-9, 1, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00016[120], x____00016[121], x____00016[122], x____00016[123], x____00016[124], x____00016[125], x____00016[126], x____00016[127], x____00016[128], x____00016[129], x____00016[130], x____00016[131], x____00016[132]], 0);
constraint int_lin_le([-9, 1, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00017[120], x____00017[121], x____00017[122], x____00017[123], x____00017[124], x____00017[125], x____00017[126], x____00017[127], x____00017[128], x____00017[129], x____00017[130], x____00017[131], x____00017[132]], 0);
constraint int_lin_le([-9, 1, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00018[120], x____00018[121], x____00018[122], x____00018[123], x____00018[124], x____00018[125], x____00018[126], x____00018[127], x____00018[128], x____00018[129], x____00018[130], x____00018[131], x____00018[132]], 0);
constraint int_lin_le([-9, 1, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00019[120], x____00019[121], x____00019[122], x____00019[123], x____00019[124], x____00019[125], x____00019[126], x____00019[127], x____00019[128], x____00019[129], x____00019[130], x____00019[131], x____00019[132]], 0);
constraint int_lin_le([-9, 1, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00020[120], x____00020[121], x____00020[122], x____00020[123], x____00020[124], x____00020[125], x____00020[126], x____00020[127], x____00020[128], x____00020[129], x____00020[130], x____00020[131], x____00020[132]], 0);
constraint int_lin_le([-8, 1, 1, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00001[106], x____00001[107], x____00001[108], x____00001[109], x____00001[110], x____00001[111], x____00001[112], x____00001[113], x____00001[114], x____00001[115], x____00001[116], x____00001[117], x____00001[118], x____00001[119]], 0);
constraint int_lin_le([-8, 1, 1, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00002[106], x____00002[107], x____00002[108], x____00002[109], x____00002[110], x____00002[111], x____00002[112], x____00002[113], x____00002[114], x____00002[115], x____00002[116], x____00002[117], x____00002[118], x____00002[119]], 0);
constraint int_lin_le([-8, 1, 1, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00003[106], x____00003[107], x____00003[108], x____00003[109], x____00003[110], x____00003[111], x____00003[112], x____00003[113], x____00003[114], x____00003[115], x____00003[116], x____00003[117], x____00003[118], x____00003[119]], 0);
constraint int_lin_le([-8, 1, 1, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00004[106], x____00004[107], x____00004[108], x____00004[109], x____00004[110], x____00004[111], x____00004[112], x____00004[113], x____00004[114], x____00004[115], x____00004[116], x____00004[117], x____00004[118], x____00004[119]], 0);
constraint int_lin_le([-8, 1, 1, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00005[106], x____00005[107], x____00005[108], x____00005[109], x____00005[110], x____00005[111], x____00005[112], x____00005[113], x____00005[114], x____00005[115], x____00005[116], x____00005[117], x____00005[118], x____00005[119]], 0);
constraint int_lin_le([-8, 1, 1, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00006[106], x____00006[107], x____00006[108], x____00006[109], x____00006[110], x____00006[111], x____00006[112], x____00006[113], x____00006[114], x____00006[115], x____00006[116], x____00006[117], x____00006[118], x____00006[119]], 0);
constraint int_lin_le([-8, 1, 1, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00007[106], x____00007[107], x____00007[108], x____00007[109], x____00007[110], x____00007[111], x____00007[112], x____00007[113], x____00007[114], x____00007[115], x____00007[116], x____00007[117], x____00007[118], x____00007[119]], 0);
constraint int_lin_le([-8, 1, 1, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00008[106], x____00008[107], x____00008[108], x____00008[109], x____00008[110], x____00008[111], x____00008[112], x____00008[113], x____00008[114], x____00008[115], x____00008[116], x____00008[117], x____00008[118], x____00008[119]], 0);
constraint int_lin_le([-8, 1, 1, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00009[106], x____00009[107], x____00009[108], x____00009[109], x____00009[110], x____00009[111], x____00009[112], x____00009[113], x____00009[114], x____00009[115], x____00009[116], x____00009[117], x____00009[118], x____00009[119]], 0);
constraint int_lin_le([-8, 1, 1, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00010[106], x____00010[107], x____00010[108], x____00010[109], x____00010[110], x____00010[111], x____00010[112], x____00010[113], x____00010[114], x____00010[115], x____00010[116], x____00010[117], x____00010[118], x____00010[119]], 0);
constraint int_lin_le([-8, 1, 1, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00011[106], x____00011[107], x____00011[108], x____00011[109], x____00011[110], x____00011[111], x____00011[112], x____00011[113], x____00011[114], x____00011[115], x____00011[116], x____00011[117], x____00011[118], x____00011[119]], 0);
constraint int_lin_le([-8, 1, 1, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00012[106], x____00012[107], x____00012[108], x____00012[109], x____00012[110], x____00012[111], x____00012[112], x____00012[113], x____00012[114], x____00012[115], x____00012[116], x____00012[117], x____00012[118], x____00012[119]], 0);
constraint int_lin_le([-8, 1, 1, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00013[106], x____00013[107], x____00013[108], x____00013[109], x____00013[110], x____00013[111], x____00013[112], x____00013[113], x____00013[114], x____00013[115], x____00013[116], x____00013[117], x____00013[118], x____00013[119]], 0);
constraint int_lin_le([-8, 1, 1, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00014[106], x____00014[107], x____00014[108], x____00014[109], x____00014[110], x____00014[111], x____00014[112], x____00014[113], x____00014[114], x____00014[115], x____00014[116], x____00014[117], x____00014[118], x____00014[119]], 0);
constraint int_lin_le([-8, 1, 1, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00015[106], x____00015[107], x____00015[108], x____00015[109], x____00015[110], x____00015[111], x____00015[112], x____00015[113], x____00015[114], x____00015[115], x____00015[116], x____00015[117], x____00015[118], x____00015[119]], 0);
constraint int_lin_le([-8, 1, 1, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00016[106], x____00016[107], x____00016[108], x____00016[109], x____00016[110], x____00016[111], x____00016[112], x____00016[113], x____00016[114], x____00016[115], x____00016[116], x____00016[117], x____00016[118], x____00016[119]], 0);
constraint int_lin_le([-8, 1, 1, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00017[106], x____00017[107], x____00017[108], x____00017[109], x____00017[110], x____00017[111], x____00017[112], x____00017[113], x____00017[114], x____00017[115], x____00017[116], x____00017[117], x____00017[118], x____00017[119]], 0);
constraint int_lin_le([-8, 1, 1, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00018[106], x____00018[107], x____00018[108], x____00018[109], x____00018[110], x____00018[111], x____00018[112], x____00018[113], x____00018[114], x____00018[115], x____00018[116], x____00018[117], x____00018[118], x____00018[119]], 0);
constraint int_lin_le([-8, 1, 1, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00019[106], x____00019[107], x____00019[108], x____00019[109], x____00019[110], x____00019[111], x____00019[112], x____00019[113], x____00019[114], x____00019[115], x____00019[116], x____00019[117], x____00019[118], x____00019[119]], 0);
constraint int_lin_le([-8, 1, 1, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00020[106], x____00020[107], x____00020[108], x____00020[109], x____00020[110], x____00020[111], x____00020[112], x____00020[113], x____00020[114], x____00020[115], x____00020[116], x____00020[117], x____00020[118], x____00020[119]], 0);
constraint int_lin_le([-6, 2, 1, 1, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00001[91], x____00001[92], x____00001[93], x____00001[94], x____00001[95], x____00001[96], x____00001[97], x____00001[98], x____00001[99], x____00001[100], x____00001[101], x____00001[102], x____00001[103], x____00001[104], x____00001[105]], 0);
constraint int_lin_le([-6, 2, 1, 1, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00002[91], x____00002[92], x____00002[93], x____00002[94], x____00002[95], x____00002[96], x____00002[97], x____00002[98], x____00002[99], x____00002[100], x____00002[101], x____00002[102], x____00002[103], x____00002[104], x____00002[105]], 0);
constraint int_lin_le([-6, 2, 1, 1, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00003[91], x____00003[92], x____00003[93], x____00003[94], x____00003[95], x____00003[96], x____00003[97], x____00003[98], x____00003[99], x____00003[100], x____00003[101], x____00003[102], x____00003[103], x____00003[104], x____00003[105]], 0);
constraint int_lin_le([-6, 2, 1, 1, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00004[91], x____00004[92], x____00004[93], x____00004[94], x____00004[95], x____00004[96], x____00004[97], x____00004[98], x____00004[99], x____00004[100], x____00004[101], x____00004[102], x____00004[103], x____00004[104], x____00004[105]], 0);
constraint int_lin_le([-6, 2, 1, 1, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00005[91], x____00005[92], x____00005[93], x____00005[94], x____00005[95], x____00005[96], x____00005[97], x____00005[98], x____00005[99], x____00005[100], x____00005[101], x____00005[102], x____00005[103], x____00005[104], x____00005[105]], 0);
constraint int_lin_le([-6, 2, 1, 1, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00006[91], x____00006[92], x____00006[93], x____00006[94], x____00006[95], x____00006[96], x____00006[97], x____00006[98], x____00006[99], x____00006[100], x____00006[101], x____00006[102], x____00006[103], x____00006[104], x____00006[105]], 0);
constraint int_lin_le([-6, 2, 1, 1, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00007[91], x____00007[92], x____00007[93], x____00007[94], x____00007[95], x____00007[96], x____00007[97], x____00007[98], x____00007[99], x____00007[100], x____00007[101], x____00007[102], x____00007[103], x____00007[104], x____00007[105]], 0);
constraint int_lin_le([-6, 2, 1, 1, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00008[91], x____00008[92], x____00008[93], x____00008[94], x____00008[95], x____00008[96], x____00008[97], x____00008[98], x____00008[99], x____00008[100], x____00008[101], x____00008[102], x____00008[103], x____00008[104], x____00008[105]], 0);
constraint int_lin_le([-6, 2, 1, 1, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00009[91], x____00009[92], x____00009[93], x____00009[94], x____00009[95], x____00009[96], x____00009[97], x____00009[98], x____00009[99], x____00009[100], x____00009[101], x____00009[102], x____00009[103], x____00009[104], x____00009[105]], 0);
constraint int_lin_le([-6, 2, 1, 1, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00010[91], x____00010[92], x____00010[93], x____00010[94], x____00010[95], x____00010[96], x____00010[97], x____00010[98], x____00010[99], x____00010[100], x____00010[101], x____00010[102], x____00010[103], x____00010[104], x____00010[105]], 0);
constraint int_lin_le([-6, 2, 1, 1, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00011[91], x____00011[92], x____00011[93], x____00011[94], x____00011[95], x____00011[96], x____00011[97], x____00011[98], x____00011[99], x____00011[100], x____00011[101], x____00011[102], x____00011[103], x____00011[104], x____00011[105]], 0);
constraint int_lin_le([-6, 2, 1, 1, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00012[91], x____00012[92], x____00012[93], x____00012[94], x____00012[95], x____00012[96], x____00012[97], x____00012[98], x____00012[99], x____00012[100], x____00012[101], x____00012[102], x____00012[103], x____00012[104], x____00012[105]], 0);
constraint int_lin_le([-6, 2, 1, 1, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00013[91], x____00013[92], x____00013[93], x____00013[94], x____00013[95], x____00013[96], x____00013[97], x____00013[98], x____00013[99], x____00013[100], x____00013[101], x____00013[102], x____00013[103], x____00013[104], x____00013[105]], 0);
constraint int_lin_le([-6, 2, 1, 1, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00014[91], x____00014[92], x____00014[93], x____00014[94], x____00014[95], x____00014[96], x____00014[97], x____00014[98], x____00014[99], x____00014[100], x____00014[101], x____00014[102], x____00014[103], x____00014[104], x____00014[105]], 0);
constraint int_lin_le([-6, 2, 1, 1, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00015[91], x____00015[92], x____00015[93], x____00015[94], x____00015[95], x____00015[96], x____00015[97], x____00015[98], x____00015[99], x____00015[100], x____00015[101], x____00015[102], x____00015[103], x____00015[104], x____00015[105]], 0);
constraint int_lin_le([-6, 2, 1, 1, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00016[91], x____00016[92], x____00016[93], x____00016[94], x____00016[95], x____00016[96], x____00016[97], x____00016[98], x____00016[99], x____00016[100], x____00016[101], x____00016[102], x____00016[103], x____00016[104], x____00016[105]], 0);
constraint int_lin_le([-6, 2, 1, 1, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00017[91], x____00017[92], x____00017[93], x____00017[94], x____00017[95], x____00017[96], x____00017[97], x____00017[98], x____00017[99], x____00017[100], x____00017[101], x____00017[102], x____00017[103], x____00017[104], x____00017[105]], 0);
constraint int_lin_le([-6, 2, 1, 1, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00018[91], x____00018[92], x____00018[93], x____00018[94], x____00018[95], x____00018[96], x____00018[97], x____00018[98], x____00018[99], x____00018[100], x____00018[101], x____00018[102], x____00018[103], x____00018[104], x____00018[105]], 0);
constraint int_lin_le([-6, 2, 1, 1, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00019[91], x____00019[92], x____00019[93], x____00019[94], x____00019[95], x____00019[96], x____00019[97], x____00019[98], x____00019[99], x____00019[100], x____00019[101], x____00019[102], x____00019[103], x____00019[104], x____00019[105]], 0);
constraint int_lin_le([-6, 2, 1, 1, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00020[91], x____00020[92], x____00020[93], x____00020[94], x____00020[95], x____00020[96], x____00020[97], x____00020[98], x____00020[99], x____00020[100], x____00020[101], x____00020[102], x____00020[103], x____00020[104], x____00020[105]], 0);
constraint int_lin_le([-7, 4, 2, 1, 1, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00001[75], x____00001[76], x____00001[77], x____00001[78], x____00001[79], x____00001[80], x____00001[81], x____00001[82], x____00001[83], x____00001[84], x____00001[85], x____00001[86], x____00001[87], x____00001[88], x____00001[89], x____00001[90]], 0);
constraint int_lin_le([-7, 4, 2, 1, 1, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00002[75], x____00002[76], x____00002[77], x____00002[78], x____00002[79], x____00002[80], x____00002[81], x____00002[82], x____00002[83], x____00002[84], x____00002[85], x____00002[86], x____00002[87], x____00002[88], x____00002[89], x____00002[90]], 0);
constraint int_lin_le([-7, 4, 2, 1, 1, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00003[75], x____00003[76], x____00003[77], x____00003[78], x____00003[79], x____00003[80], x____00003[81], x____00003[82], x____00003[83], x____00003[84], x____00003[85], x____00003[86], x____00003[87], x____00003[88], x____00003[89], x____00003[90]], 0);
constraint int_lin_le([-7, 4, 2, 1, 1, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00004[75], x____00004[76], x____00004[77], x____00004[78], x____00004[79], x____00004[80], x____00004[81], x____00004[82], x____00004[83], x____00004[84], x____00004[85], x____00004[86], x____00004[87], x____00004[88], x____00004[89], x____00004[90]], 0);
constraint int_lin_le([-7, 4, 2, 1, 1, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00005[75], x____00005[76], x____00005[77], x____00005[78], x____00005[79], x____00005[80], x____00005[81], x____00005[82], x____00005[83], x____00005[84], x____00005[85], x____00005[86], x____00005[87], x____00005[88], x____00005[89], x____00005[90]], 0);
constraint int_lin_le([-7, 4, 2, 1, 1, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00006[75], x____00006[76], x____00006[77], x____00006[78], x____00006[79], x____00006[80], x____00006[81], x____00006[82], x____00006[83], x____00006[84], x____00006[85], x____00006[86], x____00006[87], x____00006[88], x____00006[89], x____00006[90]], 0);
constraint int_lin_le([-7, 4, 2, 1, 1, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00007[75], x____00007[76], x____00007[77], x____00007[78], x____00007[79], x____00007[80], x____00007[81], x____00007[82], x____00007[83], x____00007[84], x____00007[85], x____00007[86], x____00007[87], x____00007[88], x____00007[89], x____00007[90]], 0);
constraint int_lin_le([-7, 4, 2, 1, 1, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00008[75], x____00008[76], x____00008[77], x____00008[78], x____00008[79], x____00008[80], x____00008[81], x____00008[82], x____00008[83], x____00008[84], x____00008[85], x____00008[86], x____00008[87], x____00008[88], x____00008[89], x____00008[90]], 0);
constraint int_lin_le([-7, 4, 2, 1, 1, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00009[75], x____00009[76], x____00009[77], x____00009[78], x____00009[79], x____00009[80], x____00009[81], x____00009[82], x____00009[83], x____00009[84], x____00009[85], x____00009[86], x____00009[87], x____00009[88], x____00009[89], x____00009[90]], 0);
constraint int_lin_le([-7, 4, 2, 1, 1, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00010[75], x____00010[76], x____00010[77], x____00010[78], x____00010[79], x____00010[80], x____00010[81], x____00010[82], x____00010[83], x____00010[84], x____00010[85], x____00010[86], x____00010[87], x____00010[88], x____00010[89], x____00010[90]], 0);
constraint int_lin_le([-7, 4, 2, 1, 1, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00011[75], x____00011[76], x____00011[77], x____00011[78], x____00011[79], x____00011[80], x____00011[81], x____00011[82], x____00011[83], x____00011[84], x____00011[85], x____00011[86], x____00011[87], x____00011[88], x____00011[89], x____00011[90]], 0);
constraint int_lin_le([-7, 4, 2, 1, 1, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00012[75], x____00012[76], x____00012[77], x____00012[78], x____00012[79], x____00012[80], x____00012[81], x____00012[82], x____00012[83], x____00012[84], x____00012[85], x____00012[86], x____00012[87], x____00012[88], x____00012[89], x____00012[90]], 0);
constraint int_lin_le([-7, 4, 2, 1, 1, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00013[75], x____00013[76], x____00013[77], x____00013[78], x____00013[79], x____00013[80], x____00013[81], x____00013[82], x____00013[83], x____00013[84], x____00013[85], x____00013[86], x____00013[87], x____00013[88], x____00013[89], x____00013[90]], 0);
constraint int_lin_le([-7, 4, 2, 1, 1, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00014[75], x____00014[76], x____00014[77], x____00014[78], x____00014[79], x____00014[80], x____00014[81], x____00014[82], x____00014[83], x____00014[84], x____00014[85], x____00014[86], x____00014[87], x____00014[88], x____00014[89], x____00014[90]], 0);
constraint int_lin_le([-7, 4, 2, 1, 1, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00015[75], x____00015[76], x____00015[77], x____00015[78], x____00015[79], x____00015[80], x____00015[81], x____00015[82], x____00015[83], x____00015[84], x____00015[85], x____00015[86], x____00015[87], x____00015[88], x____00015[89], x____00015[90]], 0);
constraint int_lin_le([-7, 4, 2, 1, 1, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00016[75], x____00016[76], x____00016[77], x____00016[78], x____00016[79], x____00016[80], x____00016[81], x____00016[82], x____00016[83], x____00016[84], x____00016[85], x____00016[86], x____00016[87], x____00016[88], x____00016[89], x____00016[90]], 0);
constraint int_lin_le([-7, 4, 2, 1, 1, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00017[75], x____00017[76], x____00017[77], x____00017[78], x____00017[79], x____00017[80], x____00017[81], x____00017[82], x____00017[83], x____00017[84], x____00017[85], x____00017[86], x____00017[87], x____00017[88], x____00017[89], x____00017[90]], 0);
constraint int_lin_le([-7, 4, 2, 1, 1, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00018[75], x____00018[76], x____00018[77], x____00018[78], x____00018[79], x____00018[80], x____00018[81], x____00018[82], x____00018[83], x____00018[84], x____00018[85], x____00018[86], x____00018[87], x____00018[88], x____00018[89], x____00018[90]], 0);
constraint int_lin_le([-7, 4, 2, 1, 1, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00019[75], x____00019[76], x____00019[77], x____00019[78], x____00019[79], x____00019[80], x____00019[81], x____00019[82], x____00019[83], x____00019[84], x____00019[85], x____00019[86], x____00019[87], x____00019[88], x____00019[89], x____00019[90]], 0);
constraint int_lin_le([-7, 4, 2, 1, 1, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00020[75], x____00020[76], x____00020[77], x____00020[78], x____00020[79], x____00020[80], x____00020[81], x____00020[82], x____00020[83], x____00020[84], x____00020[85], x____00020[86], x____00020[87], x____00020[88], x____00020[89], x____00020[90]], 0);
constraint int_lin_le([-8, 3, 4, 2, 1, 1, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00001[58], x____00001[59], x____00001[60], x____00001[61], x____00001[62], x____00001[63], x____00001[64], x____00001[65], x____00001[66], x____00001[67], x____00001[68], x____00001[69], x____00001[70], x____00001[71], x____00001[72], x____00001[73], x____00001[74]], 0);
constraint int_lin_le([-8, 3, 4, 2, 1, 1, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00002[58], x____00002[59], x____00002[60], x____00002[61], x____00002[62], x____00002[63], x____00002[64], x____00002[65], x____00002[66], x____00002[67], x____00002[68], x____00002[69], x____00002[70], x____00002[71], x____00002[72], x____00002[73], x____00002[74]], 0);
constraint int_lin_le([-8, 3, 4, 2, 1, 1, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00003[58], x____00003[59], x____00003[60], x____00003[61], x____00003[62], x____00003[63], x____00003[64], x____00003[65], x____00003[66], x____00003[67], x____00003[68], x____00003[69], x____00003[70], x____00003[71], x____00003[72], x____00003[73], x____00003[74]], 0);
constraint int_lin_le([-8, 3, 4, 2, 1, 1, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00004[58], x____00004[59], x____00004[60], x____00004[61], x____00004[62], x____00004[63], x____00004[64], x____00004[65], x____00004[66], x____00004[67], x____00004[68], x____00004[69], x____00004[70], x____00004[71], x____00004[72], x____00004[73], x____00004[74]], 0);
constraint int_lin_le([-8, 3, 4, 2, 1, 1, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00005[58], x____00005[59], x____00005[60], x____00005[61], x____00005[62], x____00005[63], x____00005[64], x____00005[65], x____00005[66], x____00005[67], x____00005[68], x____00005[69], x____00005[70], x____00005[71], x____00005[72], x____00005[73], x____00005[74]], 0);
constraint int_lin_le([-8, 3, 4, 2, 1, 1, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00006[58], x____00006[59], x____00006[60], x____00006[61], x____00006[62], x____00006[63], x____00006[64], x____00006[65], x____00006[66], x____00006[67], x____00006[68], x____00006[69], x____00006[70], x____00006[71], x____00006[72], x____00006[73], x____00006[74]], 0);
constraint int_lin_le([-8, 3, 4, 2, 1, 1, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00007[58], x____00007[59], x____00007[60], x____00007[61], x____00007[62], x____00007[63], x____00007[64], x____00007[65], x____00007[66], x____00007[67], x____00007[68], x____00007[69], x____00007[70], x____00007[71], x____00007[72], x____00007[73], x____00007[74]], 0);
constraint int_lin_le([-8, 3, 4, 2, 1, 1, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00008[58], x____00008[59], x____00008[60], x____00008[61], x____00008[62], x____00008[63], x____00008[64], x____00008[65], x____00008[66], x____00008[67], x____00008[68], x____00008[69], x____00008[70], x____00008[71], x____00008[72], x____00008[73], x____00008[74]], 0);
constraint int_lin_le([-8, 3, 4, 2, 1, 1, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00009[58], x____00009[59], x____00009[60], x____00009[61], x____00009[62], x____00009[63], x____00009[64], x____00009[65], x____00009[66], x____00009[67], x____00009[68], x____00009[69], x____00009[70], x____00009[71], x____00009[72], x____00009[73], x____00009[74]], 0);
constraint int_lin_le([-8, 3, 4, 2, 1, 1, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00010[58], x____00010[59], x____00010[60], x____00010[61], x____00010[62], x____00010[63], x____00010[64], x____00010[65], x____00010[66], x____00010[67], x____00010[68], x____00010[69], x____00010[70], x____00010[71], x____00010[72], x____00010[73], x____00010[74]], 0);
constraint int_lin_le([-8, 3, 4, 2, 1, 1, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00011[58], x____00011[59], x____00011[60], x____00011[61], x____00011[62], x____00011[63], x____00011[64], x____00011[65], x____00011[66], x____00011[67], x____00011[68], x____00011[69], x____00011[70], x____00011[71], x____00011[72], x____00011[73], x____00011[74]], 0);
constraint int_lin_le([-8, 3, 4, 2, 1, 1, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00012[58], x____00012[59], x____00012[60], x____00012[61], x____00012[62], x____00012[63], x____00012[64], x____00012[65], x____00012[66], x____00012[67], x____00012[68], x____00012[69], x____00012[70], x____00012[71], x____00012[72], x____00012[73], x____00012[74]], 0);
constraint int_lin_le([-8, 3, 4, 2, 1, 1, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00013[58], x____00013[59], x____00013[60], x____00013[61], x____00013[62], x____00013[63], x____00013[64], x____00013[65], x____00013[66], x____00013[67], x____00013[68], x____00013[69], x____00013[70], x____00013[71], x____00013[72], x____00013[73], x____00013[74]], 0);
constraint int_lin_le([-8, 3, 4, 2, 1, 1, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00014[58], x____00014[59], x____00014[60], x____00014[61], x____00014[62], x____00014[63], x____00014[64], x____00014[65], x____00014[66], x____00014[67], x____00014[68], x____00014[69], x____00014[70], x____00014[71], x____00014[72], x____00014[73], x____00014[74]], 0);
constraint int_lin_le([-8, 3, 4, 2, 1, 1, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00015[58], x____00015[59], x____00015[60], x____00015[61], x____00015[62], x____00015[63], x____00015[64], x____00015[65], x____00015[66], x____00015[67], x____00015[68], x____00015[69], x____00015[70], x____00015[71], x____00015[72], x____00015[73], x____00015[74]], 0);
constraint int_lin_le([-8, 3, 4, 2, 1, 1, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00016[58], x____00016[59], x____00016[60], x____00016[61], x____00016[62], x____00016[63], x____00016[64], x____00016[65], x____00016[66], x____00016[67], x____00016[68], x____00016[69], x____00016[70], x____00016[71], x____00016[72], x____00016[73], x____00016[74]], 0);
constraint int_lin_le([-8, 3, 4, 2, 1, 1, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00017[58], x____00017[59], x____00017[60], x____00017[61], x____00017[62], x____00017[63], x____00017[64], x____00017[65], x____00017[66], x____00017[67], x____00017[68], x____00017[69], x____00017[70], x____00017[71], x____00017[72], x____00017[73], x____00017[74]], 0);
constraint int_lin_le([-8, 3, 4, 2, 1, 1, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00018[58], x____00018[59], x____00018[60], x____00018[61], x____00018[62], x____00018[63], x____00018[64], x____00018[65], x____00018[66], x____00018[67], x____00018[68], x____00018[69], x____00018[70], x____00018[71], x____00018[72], x____00018[73], x____00018[74]], 0);
constraint int_lin_le([-8, 3, 4, 2, 1, 1, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00019[58], x____00019[59], x____00019[60], x____00019[61], x____00019[62], x____00019[63], x____00019[64], x____00019[65], x____00019[66], x____00019[67], x____00019[68], x____00019[69], x____00019[70], x____00019[71], x____00019[72], x____00019[73], x____00019[74]], 0);
constraint int_lin_le([-8, 3, 4, 2, 1, 1, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00020[58], x____00020[59], x____00020[60], x____00020[61], x____00020[62], x____00020[63], x____00020[64], x____00020[65], x____00020[66], x____00020[67], x____00020[68], x____00020[69], x____00020[70], x____00020[71], x____00020[72], x____00020[73], x____00020[74]], 0);
constraint int_lin_le([-1, 2, 3, 4, 2, 1, 1, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00001[40], x____00001[41], x____00001[42], x____00001[43], x____00001[44], x____00001[45], x____00001[46], x____00001[47], x____00001[48], x____00001[49], x____00001[50], x____00001[51], x____00001[52], x____00001[53], x____00001[54], x____00001[55], x____00001[56], x____00001[57]], 0);
constraint int_lin_le([-1, 2, 3, 4, 2, 1, 1, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00002[40], x____00002[41], x____00002[42], x____00002[43], x____00002[44], x____00002[45], x____00002[46], x____00002[47], x____00002[48], x____00002[49], x____00002[50], x____00002[51], x____00002[52], x____00002[53], x____00002[54], x____00002[55], x____00002[56], x____00002[57]], 0);
constraint int_lin_le([-1, 2, 3, 4, 2, 1, 1, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00003[40], x____00003[41], x____00003[42], x____00003[43], x____00003[44], x____00003[45], x____00003[46], x____00003[47], x____00003[48], x____00003[49], x____00003[50], x____00003[51], x____00003[52], x____00003[53], x____00003[54], x____00003[55], x____00003[56], x____00003[57]], 0);
constraint int_lin_le([-1, 2, 3, 4, 2, 1, 1, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00004[40], x____00004[41], x____00004[42], x____00004[43], x____00004[44], x____00004[45], x____00004[46], x____00004[47], x____00004[48], x____00004[49], x____00004[50], x____00004[51], x____00004[52], x____00004[53], x____00004[54], x____00004[55], x____00004[56], x____00004[57]], 0);
constraint int_lin_le([-1, 2, 3, 4, 2, 1, 1, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00005[40], x____00005[41], x____00005[42], x____00005[43], x____00005[44], x____00005[45], x____00005[46], x____00005[47], x____00005[48], x____00005[49], x____00005[50], x____00005[51], x____00005[52], x____00005[53], x____00005[54], x____00005[55], x____00005[56], x____00005[57]], 0);
constraint int_lin_le([-1, 2, 3, 4, 2, 1, 1, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00006[40], x____00006[41], x____00006[42], x____00006[43], x____00006[44], x____00006[45], x____00006[46], x____00006[47], x____00006[48], x____00006[49], x____00006[50], x____00006[51], x____00006[52], x____00006[53], x____00006[54], x____00006[55], x____00006[56], x____00006[57]], 0);
constraint int_lin_le([-1, 2, 3, 4, 2, 1, 1, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00007[40], x____00007[41], x____00007[42], x____00007[43], x____00007[44], x____00007[45], x____00007[46], x____00007[47], x____00007[48], x____00007[49], x____00007[50], x____00007[51], x____00007[52], x____00007[53], x____00007[54], x____00007[55], x____00007[56], x____00007[57]], 0);
constraint int_lin_le([-1, 2, 3, 4, 2, 1, 1, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00008[40], x____00008[41], x____00008[42], x____00008[43], x____00008[44], x____00008[45], x____00008[46], x____00008[47], x____00008[48], x____00008[49], x____00008[50], x____00008[51], x____00008[52], x____00008[53], x____00008[54], x____00008[55], x____00008[56], x____00008[57]], 0);
constraint int_lin_le([-1, 2, 3, 4, 2, 1, 1, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00009[40], x____00009[41], x____00009[42], x____00009[43], x____00009[44], x____00009[45], x____00009[46], x____00009[47], x____00009[48], x____00009[49], x____00009[50], x____00009[51], x____00009[52], x____00009[53], x____00009[54], x____00009[55], x____00009[56], x____00009[57]], 0);
constraint int_lin_le([-1, 2, 3, 4, 2, 1, 1, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00010[40], x____00010[41], x____00010[42], x____00010[43], x____00010[44], x____00010[45], x____00010[46], x____00010[47], x____00010[48], x____00010[49], x____00010[50], x____00010[51], x____00010[52], x____00010[53], x____00010[54], x____00010[55], x____00010[56], x____00010[57]], 0);
constraint int_lin_le([-1, 2, 3, 4, 2, 1, 1, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00011[40], x____00011[41], x____00011[42], x____00011[43], x____00011[44], x____00011[45], x____00011[46], x____00011[47], x____00011[48], x____00011[49], x____00011[50], x____00011[51], x____00011[52], x____00011[53], x____00011[54], x____00011[55], x____00011[56], x____00011[57]], 0);
constraint int_lin_le([-1, 2, 3, 4, 2, 1, 1, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00012[40], x____00012[41], x____00012[42], x____00012[43], x____00012[44], x____00012[45], x____00012[46], x____00012[47], x____00012[48], x____00012[49], x____00012[50], x____00012[51], x____00012[52], x____00012[53], x____00012[54], x____00012[55], x____00012[56], x____00012[57]], 0);
constraint int_lin_le([-1, 2, 3, 4, 2, 1, 1, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00013[40], x____00013[41], x____00013[42], x____00013[43], x____00013[44], x____00013[45], x____00013[46], x____00013[47], x____00013[48], x____00013[49], x____00013[50], x____00013[51], x____00013[52], x____00013[53], x____00013[54], x____00013[55], x____00013[56], x____00013[57]], 0);
constraint int_lin_le([-1, 2, 3, 4, 2, 1, 1, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00014[40], x____00014[41], x____00014[42], x____00014[43], x____00014[44], x____00014[45], x____00014[46], x____00014[47], x____00014[48], x____00014[49], x____00014[50], x____00014[51], x____00014[52], x____00014[53], x____00014[54], x____00014[55], x____00014[56], x____00014[57]], 0);
constraint int_lin_le([-1, 2, 3, 4, 2, 1, 1, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00015[40], x____00015[41], x____00015[42], x____00015[43], x____00015[44], x____00015[45], x____00015[46], x____00015[47], x____00015[48], x____00015[49], x____00015[50], x____00015[51], x____00015[52], x____00015[53], x____00015[54], x____00015[55], x____00015[56], x____00015[57]], 0);
constraint int_lin_le([-1, 2, 3, 4, 2, 1, 1, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00016[40], x____00016[41], x____00016[42], x____00016[43], x____00016[44], x____00016[45], x____00016[46], x____00016[47], x____00016[48], x____00016[49], x____00016[50], x____00016[51], x____00016[52], x____00016[53], x____00016[54], x____00016[55], x____00016[56], x____00016[57]], 0);
constraint int_lin_le([-1, 2, 3, 4, 2, 1, 1, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00017[40], x____00017[41], x____00017[42], x____00017[43], x____00017[44], x____00017[45], x____00017[46], x____00017[47], x____00017[48], x____00017[49], x____00017[50], x____00017[51], x____00017[52], x____00017[53], x____00017[54], x____00017[55], x____00017[56], x____00017[57]], 0);
constraint int_lin_le([-1, 2, 3, 4, 2, 1, 1, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00018[40], x____00018[41], x____00018[42], x____00018[43], x____00018[44], x____00018[45], x____00018[46], x____00018[47], x____00018[48], x____00018[49], x____00018[50], x____00018[51], x____00018[52], x____00018[53], x____00018[54], x____00018[55], x____00018[56], x____00018[57]], 0);
constraint int_lin_le([-1, 2, 3, 4, 2, 1, 1, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00019[40], x____00019[41], x____00019[42], x____00019[43], x____00019[44], x____00019[45], x____00019[46], x____00019[47], x____00019[48], x____00019[49], x____00019[50], x____00019[51], x____00019[52], x____00019[53], x____00019[54], x____00019[55], x____00019[56], x____00019[57]], 0);
constraint int_lin_le([-1, 2, 3, 4, 2, 1, 1, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00020[40], x____00020[41], x____00020[42], x____00020[43], x____00020[44], x____00020[45], x____00020[46], x____00020[47], x____00020[48], x____00020[49], x____00020[50], x____00020[51], x____00020[52], x____00020[53], x____00020[54], x____00020[55], x____00020[56], x____00020[57]], 0);
constraint int_lin_le([9, 2, 3, 4, 2, 1, 1, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00001[22], x____00001[23], x____00001[24], x____00001[25], x____00001[26], x____00001[27], x____00001[28], x____00001[29], x____00001[30], x____00001[31], x____00001[32], x____00001[33], x____00001[34], x____00001[35], x____00001[36], x____00001[37], x____00001[38], x____00001[39]], 0);
constraint int_lin_le([9, 2, 3, 4, 2, 1, 1, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00002[22], x____00002[23], x____00002[24], x____00002[25], x____00002[26], x____00002[27], x____00002[28], x____00002[29], x____00002[30], x____00002[31], x____00002[32], x____00002[33], x____00002[34], x____00002[35], x____00002[36], x____00002[37], x____00002[38], x____00002[39]], 0);
constraint int_lin_le([9, 2, 3, 4, 2, 1, 1, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00003[22], x____00003[23], x____00003[24], x____00003[25], x____00003[26], x____00003[27], x____00003[28], x____00003[29], x____00003[30], x____00003[31], x____00003[32], x____00003[33], x____00003[34], x____00003[35], x____00003[36], x____00003[37], x____00003[38], x____00003[39]], 0);
constraint int_lin_le([9, 2, 3, 4, 2, 1, 1, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00004[22], x____00004[23], x____00004[24], x____00004[25], x____00004[26], x____00004[27], x____00004[28], x____00004[29], x____00004[30], x____00004[31], x____00004[32], x____00004[33], x____00004[34], x____00004[35], x____00004[36], x____00004[37], x____00004[38], x____00004[39]], 0);
constraint int_lin_le([9, 2, 3, 4, 2, 1, 1, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00005[22], x____00005[23], x____00005[24], x____00005[25], x____00005[26], x____00005[27], x____00005[28], x____00005[29], x____00005[30], x____00005[31], x____00005[32], x____00005[33], x____00005[34], x____00005[35], x____00005[36], x____00005[37], x____00005[38], x____00005[39]], 0);
constraint int_lin_le([9, 2, 3, 4, 2, 1, 1, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00006[22], x____00006[23], x____00006[24], x____00006[25], x____00006[26], x____00006[27], x____00006[28], x____00006[29], x____00006[30], x____00006[31], x____00006[32], x____00006[33], x____00006[34], x____00006[35], x____00006[36], x____00006[37], x____00006[38], x____00006[39]], 0);
constraint int_lin_le([9, 2, 3, 4, 2, 1, 1, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00007[22], x____00007[23], x____00007[24], x____00007[25], x____00007[26], x____00007[27], x____00007[28], x____00007[29], x____00007[30], x____00007[31], x____00007[32], x____00007[33], x____00007[34], x____00007[35], x____00007[36], x____00007[37], x____00007[38], x____00007[39]], 0);
constraint int_lin_le([9, 2, 3, 4, 2, 1, 1, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00008[22], x____00008[23], x____00008[24], x____00008[25], x____00008[26], x____00008[27], x____00008[28], x____00008[29], x____00008[30], x____00008[31], x____00008[32], x____00008[33], x____00008[34], x____00008[35], x____00008[36], x____00008[37], x____00008[38], x____00008[39]], 0);
constraint int_lin_le([9, 2, 3, 4, 2, 1, 1, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00009[22], x____00009[23], x____00009[24], x____00009[25], x____00009[26], x____00009[27], x____00009[28], x____00009[29], x____00009[30], x____00009[31], x____00009[32], x____00009[33], x____00009[34], x____00009[35], x____00009[36], x____00009[37], x____00009[38], x____00009[39]], 0);
constraint int_lin_le([9, 2, 3, 4, 2, 1, 1, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00010[22], x____00010[23], x____00010[24], x____00010[25], x____00010[26], x____00010[27], x____00010[28], x____00010[29], x____00010[30], x____00010[31], x____00010[32], x____00010[33], x____00010[34], x____00010[35], x____00010[36], x____00010[37], x____00010[38], x____00010[39]], 0);
constraint int_lin_le([9, 2, 3, 4, 2, 1, 1, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00011[22], x____00011[23], x____00011[24], x____00011[25], x____00011[26], x____00011[27], x____00011[28], x____00011[29], x____00011[30], x____00011[31], x____00011[32], x____00011[33], x____00011[34], x____00011[35], x____00011[36], x____00011[37], x____00011[38], x____00011[39]], 0);
constraint int_lin_le([9, 2, 3, 4, 2, 1, 1, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00012[22], x____00012[23], x____00012[24], x____00012[25], x____00012[26], x____00012[27], x____00012[28], x____00012[29], x____00012[30], x____00012[31], x____00012[32], x____00012[33], x____00012[34], x____00012[35], x____00012[36], x____00012[37], x____00012[38], x____00012[39]], 0);
constraint int_lin_le([9, 2, 3, 4, 2, 1, 1, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00013[22], x____00013[23], x____00013[24], x____00013[25], x____00013[26], x____00013[27], x____00013[28], x____00013[29], x____00013[30], x____00013[31], x____00013[32], x____00013[33], x____00013[34], x____00013[35], x____00013[36], x____00013[37], x____00013[38], x____00013[39]], 0);
constraint int_lin_le([9, 2, 3, 4, 2, 1, 1, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00014[22], x____00014[23], x____00014[24], x____00014[25], x____00014[26], x____00014[27], x____00014[28], x____00014[29], x____00014[30], x____00014[31], x____00014[32], x____00014[33], x____00014[34], x____00014[35], x____00014[36], x____00014[37], x____00014[38], x____00014[39]], 0);
constraint int_lin_le([9, 2, 3, 4, 2, 1, 1, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00015[22], x____00015[23], x____00015[24], x____00015[25], x____00015[26], x____00015[27], x____00015[28], x____00015[29], x____00015[30], x____00015[31], x____00015[32], x____00015[33], x____00015[34], x____00015[35], x____00015[36], x____00015[37], x____00015[38], x____00015[39]], 0);
constraint int_lin_le([9, 2, 3, 4, 2, 1, 1, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00016[22], x____00016[23], x____00016[24], x____00016[25], x____00016[26], x____00016[27], x____00016[28], x____00016[29], x____00016[30], x____00016[31], x____00016[32], x____00016[33], x____00016[34], x____00016[35], x____00016[36], x____00016[37], x____00016[38], x____00016[39]], 0);
constraint int_lin_le([9, 2, 3, 4, 2, 1, 1, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00017[22], x____00017[23], x____00017[24], x____00017[25], x____00017[26], x____00017[27], x____00017[28], x____00017[29], x____00017[30], x____00017[31], x____00017[32], x____00017[33], x____00017[34], x____00017[35], x____00017[36], x____00017[37], x____00017[38], x____00017[39]], 0);
constraint int_lin_le([9, 2, 3, 4, 2, 1, 1, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00018[22], x____00018[23], x____00018[24], x____00018[25], x____00018[26], x____00018[27], x____00018[28], x____00018[29], x____00018[30], x____00018[31], x____00018[32], x____00018[33], x____00018[34], x____00018[35], x____00018[36], x____00018[37], x____00018[38], x____00018[39]], 0);
constraint int_lin_le([9, 2, 3, 4, 2, 1, 1, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00019[22], x____00019[23], x____00019[24], x____00019[25], x____00019[26], x____00019[27], x____00019[28], x____00019[29], x____00019[30], x____00019[31], x____00019[32], x____00019[33], x____00019[34], x____00019[35], x____00019[36], x____00019[37], x____00019[38], x____00019[39]], 0);
constraint int_lin_le([9, 2, 3, 4, 2, 1, 1, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00020[22], x____00020[23], x____00020[24], x____00020[25], x____00020[26], x____00020[27], x____00020[28], x____00020[29], x____00020[30], x____00020[31], x____00020[32], x____00020[33], x____00020[34], x____00020[35], x____00020[36], x____00020[37], x____00020[38], x____00020[39]], 0);
constraint int_lin_le([-8, 10, 9, 2, 3, 4, 2, 1, 1, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00001[1], x____00001[2], x____00001[3], x____00001[4], x____00001[5], x____00001[6], x____00001[7], x____00001[8], x____00001[9], x____00001[10], x____00001[11], x____00001[12], x____00001[13], x____00001[14], x____00001[15], x____00001[16], x____00001[17], x____00001[18], x____00001[19], x____00001[20]], 0);
constraint int_lin_le([-8, 10, 9, 2, 3, 4, 2, 1, 1, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00002[1], x____00002[2], x____00002[3], x____00002[4], x____00002[5], x____00002[6], x____00002[7], x____00002[8], x____00002[9], x____00002[10], x____00002[11], x____00002[12], x____00002[13], x____00002[14], x____00002[15], x____00002[16], x____00002[17], x____00002[18], x____00002[19], x____00002[20]], 0);
constraint int_lin_le([-8, 10, 9, 2, 3, 4, 2, 1, 1, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00003[1], x____00003[2], x____00003[3], x____00003[4], x____00003[5], x____00003[6], x____00003[7], x____00003[8], x____00003[9], x____00003[10], x____00003[11], x____00003[12], x____00003[13], x____00003[14], x____00003[15], x____00003[16], x____00003[17], x____00003[18], x____00003[19], x____00003[20]], 0);
constraint int_lin_le([-8, 10, 9, 2, 3, 4, 2, 1, 1, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00004[1], x____00004[2], x____00004[3], x____00004[4], x____00004[5], x____00004[6], x____00004[7], x____00004[8], x____00004[9], x____00004[10], x____00004[11], x____00004[12], x____00004[13], x____00004[14], x____00004[15], x____00004[16], x____00004[17], x____00004[18], x____00004[19], x____00004[20]], 0);
constraint int_lin_le([-8, 10, 9, 2, 3, 4, 2, 1, 1, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00005[1], x____00005[2], x____00005[3], x____00005[4], x____00005[5], x____00005[6], x____00005[7], x____00005[8], x____00005[9], x____00005[10], x____00005[11], x____00005[12], x____00005[13], x____00005[14], x____00005[15], x____00005[16], x____00005[17], x____00005[18], x____00005[19], x____00005[20]], 0);
constraint int_lin_le([-8, 10, 9, 2, 3, 4, 2, 1, 1, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00006[1], x____00006[2], x____00006[3], x____00006[4], x____00006[5], x____00006[6], x____00006[7], x____00006[8], x____00006[9], x____00006[10], x____00006[11], x____00006[12], x____00006[13], x____00006[14], x____00006[15], x____00006[16], x____00006[17], x____00006[18], x____00006[19], x____00006[20]], 0);
constraint int_lin_le([-8, 10, 9, 2, 3, 4, 2, 1, 1, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00007[1], x____00007[2], x____00007[3], x____00007[4], x____00007[5], x____00007[6], x____00007[7], x____00007[8], x____00007[9], x____00007[10], x____00007[11], x____00007[12], x____00007[13], x____00007[14], x____00007[15], x____00007[16], x____00007[17], x____00007[18], x____00007[19], x____00007[20]], 0);
constraint int_lin_le([-8, 10, 9, 2, 3, 4, 2, 1, 1, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00008[1], x____00008[2], x____00008[3], x____00008[4], x____00008[5], x____00008[6], x____00008[7], x____00008[8], x____00008[9], x____00008[10], x____00008[11], x____00008[12], x____00008[13], x____00008[14], x____00008[15], x____00008[16], x____00008[17], x____00008[18], x____00008[19], x____00008[20]], 0);
constraint int_lin_le([-8, 10, 9, 2, 3, 4, 2, 1, 1, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00009[1], x____00009[2], x____00009[3], x____00009[4], x____00009[5], x____00009[6], x____00009[7], x____00009[8], x____00009[9], x____00009[10], x____00009[11], x____00009[12], x____00009[13], x____00009[14], x____00009[15], x____00009[16], x____00009[17], x____00009[18], x____00009[19], x____00009[20]], 0);
constraint int_lin_le([-8, 10, 9, 2, 3, 4, 2, 1, 1, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00010[1], x____00010[2], x____00010[3], x____00010[4], x____00010[5], x____00010[6], x____00010[7], x____00010[8], x____00010[9], x____00010[10], x____00010[11], x____00010[12], x____00010[13], x____00010[14], x____00010[15], x____00010[16], x____00010[17], x____00010[18], x____00010[19], x____00010[20]], 0);
constraint int_lin_le([-8, 10, 9, 2, 3, 4, 2, 1, 1, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00011[1], x____00011[2], x____00011[3], x____00011[4], x____00011[5], x____00011[6], x____00011[7], x____00011[8], x____00011[9], x____00011[10], x____00011[11], x____00011[12], x____00011[13], x____00011[14], x____00011[15], x____00011[16], x____00011[17], x____00011[18], x____00011[19], x____00011[20]], 0);
constraint int_lin_le([-8, 10, 9, 2, 3, 4, 2, 1, 1, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00012[1], x____00012[2], x____00012[3], x____00012[4], x____00012[5], x____00012[6], x____00012[7], x____00012[8], x____00012[9], x____00012[10], x____00012[11], x____00012[12], x____00012[13], x____00012[14], x____00012[15], x____00012[16], x____00012[17], x____00012[18], x____00012[19], x____00012[20]], 0);
constraint int_lin_le([-8, 10, 9, 2, 3, 4, 2, 1, 1, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00013[1], x____00013[2], x____00013[3], x____00013[4], x____00013[5], x____00013[6], x____00013[7], x____00013[8], x____00013[9], x____00013[10], x____00013[11], x____00013[12], x____00013[13], x____00013[14], x____00013[15], x____00013[16], x____00013[17], x____00013[18], x____00013[19], x____00013[20]], 0);
constraint int_lin_le([-8, 10, 9, 2, 3, 4, 2, 1, 1, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00014[1], x____00014[2], x____00014[3], x____00014[4], x____00014[5], x____00014[6], x____00014[7], x____00014[8], x____00014[9], x____00014[10], x____00014[11], x____00014[12], x____00014[13], x____00014[14], x____00014[15], x____00014[16], x____00014[17], x____00014[18], x____00014[19], x____00014[20]], 0);
constraint int_lin_le([-8, 10, 9, 2, 3, 4, 2, 1, 1, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00015[1], x____00015[2], x____00015[3], x____00015[4], x____00015[5], x____00015[6], x____00015[7], x____00015[8], x____00015[9], x____00015[10], x____00015[11], x____00015[12], x____00015[13], x____00015[14], x____00015[15], x____00015[16], x____00015[17], x____00015[18], x____00015[19], x____00015[20]], 0);
constraint int_lin_le([-8, 10, 9, 2, 3, 4, 2, 1, 1, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00016[1], x____00016[2], x____00016[3], x____00016[4], x____00016[5], x____00016[6], x____00016[7], x____00016[8], x____00016[9], x____00016[10], x____00016[11], x____00016[12], x____00016[13], x____00016[14], x____00016[15], x____00016[16], x____00016[17], x____00016[18], x____00016[19], x____00016[20]], 0);
constraint int_lin_le([-8, 10, 9, 2, 3, 4, 2, 1, 1, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00017[1], x____00017[2], x____00017[3], x____00017[4], x____00017[5], x____00017[6], x____00017[7], x____00017[8], x____00017[9], x____00017[10], x____00017[11], x____00017[12], x____00017[13], x____00017[14], x____00017[15], x____00017[16], x____00017[17], x____00017[18], x____00017[19], x____00017[20]], 0);
constraint int_lin_le([-8, 10, 9, 2, 3, 4, 2, 1, 1, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00018[1], x____00018[2], x____00018[3], x____00018[4], x____00018[5], x____00018[6], x____00018[7], x____00018[8], x____00018[9], x____00018[10], x____00018[11], x____00018[12], x____00018[13], x____00018[14], x____00018[15], x____00018[16], x____00018[17], x____00018[18], x____00018[19], x____00018[20]], 0);
constraint int_lin_le([-8, 10, 9, 2, 3, 4, 2, 1, 1, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00019[1], x____00019[2], x____00019[3], x____00019[4], x____00019[5], x____00019[6], x____00019[7], x____00019[8], x____00019[9], x____00019[10], x____00019[11], x____00019[12], x____00019[13], x____00019[14], x____00019[15], x____00019[16], x____00019[17], x____00019[18], x____00019[19], x____00019[20]], 0);
constraint int_lin_le([-8, 10, 9, 2, 3, 4, 2, 1, 1, 5, 7, 10, 2, 9, 4, 5, 4, 7, 2, 1], [x____00020[1], x____00020[2], x____00020[3], x____00020[4], x____00020[5], x____00020[6], x____00020[7], x____00020[8], x____00020[9], x____00020[10], x____00020[11], x____00020[12], x____00020[13], x____00020[14], x____00020[15], x____00020[16], x____00020[17], x____00020[18], x____00020[19], x____00020[20]], 0);
constraint int_lin_le([-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[1], item[21], item[41], item[61], item[81], item[101], item[121], item[141], item[161], item[181], item[201], item[221], item[241], item[261], item[281], item[301], item[321], item[341], item[361], item[381]], -1);
constraint int_lin_le([-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[2], item[22], item[42], item[62], item[82], item[102], item[122], item[142], item[162], item[182], item[202], item[222], item[242], item[262], item[282], item[302], item[322], item[342], item[362], item[382]], -1);
constraint int_lin_le([-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[3], item[23], item[43], item[63], item[83], item[103], item[123], item[143], item[163], item[183], item[203], item[223], item[243], item[263], item[283], item[303], item[323], item[343], item[363], item[383]], -1);
constraint int_lin_le([-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[4], item[24], item[44], item[64], item[84], item[104], item[124], item[144], item[164], item[184], item[204], item[224], item[244], item[264], item[284], item[304], item[324], item[344], item[364], item[384]], -1);
constraint int_lin_le([-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[5], item[25], item[45], item[65], item[85], item[105], item[125], item[145], item[165], item[185], item[205], item[225], item[245], item[265], item[285], item[305], item[325], item[345], item[365], item[385]], -1);
constraint int_lin_le([-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[6], item[26], item[46], item[66], item[86], item[106], item[126], item[146], item[166], item[186], item[206], item[226], item[246], item[266], item[286], item[306], item[326], item[346], item[366], item[386]], -1);
constraint int_lin_le([-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[7], item[27], item[47], item[67], item[87], item[107], item[127], item[147], item[167], item[187], item[207], item[227], item[247], item[267], item[287], item[307], item[327], item[347], item[367], item[387]], -1);
constraint int_lin_le([-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[8], item[28], item[48], item[68], item[88], item[108], item[128], item[148], item[168], item[188], item[208], item[228], item[248], item[268], item[288], item[308], item[328], item[348], item[368], item[388]], -1);
constraint int_lin_le([-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[9], item[29], item[49], item[69], item[89], item[109], item[129], item[149], item[169], item[189], item[209], item[229], item[249], item[269], item[289], item[309], item[329], item[349], item[369], item[389]], -1);
constraint int_lin_le([-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[10], item[30], item[50], item[70], item[90], item[110], item[130], item[150], item[170], item[190], item[210], item[230], item[250], item[270], item[290], item[310], item[330], item[350], item[370], item[390]], -1);
constraint int_lin_le([-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[11], item[31], item[51], item[71], item[91], item[111], item[131], item[151], item[171], item[191], item[211], item[231], item[251], item[271], item[291], item[311], item[331], item[351], item[371], item[391]], -1);
constraint int_lin_le([-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[12], item[32], item[52], item[72], item[92], item[112], item[132], item[152], item[172], item[192], item[212], item[232], item[252], item[272], item[292], item[312], item[332], item[352], item[372], item[392]], -1);
constraint int_lin_le([-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[13], item[33], item[53], item[73], item[93], item[113], item[133], item[153], item[173], item[193], item[213], item[233], item[253], item[273], item[293], item[313], item[333], item[353], item[373], item[393]], -1);
constraint int_lin_le([-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[14], item[34], item[54], item[74], item[94], item[114], item[134], item[154], item[174], item[194], item[214], item[234], item[254], item[274], item[294], item[314], item[334], item[354], item[374], item[394]], -1);
constraint int_lin_le([-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[15], item[35], item[55], item[75], item[95], item[115], item[135], item[155], item[175], item[195], item[215], item[235], item[255], item[275], item[295], item[315], item[335], item[355], item[375], item[395]], -1);
constraint int_lin_le([-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[16], item[36], item[56], item[76], item[96], item[116], item[136], item[156], item[176], item[196], item[216], item[236], item[256], item[276], item[296], item[316], item[336], item[356], item[376], item[396]], -1);
constraint int_lin_le([-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[17], item[37], item[57], item[77], item[97], item[117], item[137], item[157], item[177], item[197], item[217], item[237], item[257], item[277], item[297], item[317], item[337], item[357], item[377], item[397]], -1);
constraint int_lin_le([-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[18], item[38], item[58], item[78], item[98], item[118], item[138], item[158], item[178], item[198], item[218], item[238], item[258], item[278], item[298], item[318], item[338], item[358], item[378], item[398]], -1);
constraint int_lin_le([-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[19], item[39], item[59], item[79], item[99], item[119], item[139], item[159], item[179], item[199], item[219], item[239], item[259], item[279], item[299], item[319], item[339], item[359], item[379], item[399]], -1);
constraint int_lin_le([-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [item[20], item[40], item[60], item[80], item[100], item[120], item[140], item[160], item[180], item[200], item[220], item[240], item[260], item[280], item[300], item[320], item[340], item[360], item[380], item[400]], -1);
constraint int_lin_le([-10, 10, 10, 10, 10, 9, 9, 8, 7, 7, 6, 5, 4, 4, 4, 4, 3, 3, 2, 2, 1], [bin[1], x____00001[1], x____00001[21], x____00001[40], x____00001[58], x____00001[75], x____00001[91], x____00001[106], x____00001[120], x____00001[133], x____00001[145], x____00001[156], x____00001[166], x____00001[175], x____00001[183], x____00001[190], x____00001[196], x____00001[201], x____00001[205], x____00001[208], x____00001[210]], 0);
constraint int_lin_le([-10, 10, 10, 10, 10, 9, 9, 8, 7, 7, 6, 5, 4, 4, 4, 4, 3, 3, 2, 2, 1], [bin[2], x____00002[1], x____00002[21], x____00002[40], x____00002[58], x____00002[75], x____00002[91], x____00002[106], x____00002[120], x____00002[133], x____00002[145], x____00002[156], x____00002[166], x____00002[175], x____00002[183], x____00002[190], x____00002[196], x____00002[201], x____00002[205], x____00002[208], x____00002[210]], 0);
constraint int_lin_le([-10, 10, 10, 10, 10, 9, 9, 8, 7, 7, 6, 5, 4, 4, 4, 4, 3, 3, 2, 2, 1], [bin[3], x____00003[1], x____00003[21], x____00003[40], x____00003[58], x____00003[75], x____00003[91], x____00003[106], x____00003[120], x____00003[133], x____00003[145], x____00003[156], x____00003[166], x____00003[175], x____00003[183], x____00003[190], x____00003[196], x____00003[201], x____00003[205], x____00003[208], x____00003[210]], 0);
constraint int_lin_le([-10, 10, 10, 10, 10, 9, 9, 8, 7, 7, 6, 5, 4, 4, 4, 4, 3, 3, 2, 2, 1], [bin[4], x____00004[1], x____00004[21], x____00004[40], x____00004[58], x____00004[75], x____00004[91], x____00004[106], x____00004[120], x____00004[133], x____00004[145], x____00004[156], x____00004[166], x____00004[175], x____00004[183], x____00004[190], x____00004[196], x____00004[201], x____00004[205], x____00004[208], x____00004[210]], 0);
constraint int_lin_le([-10, 10, 10, 10, 10, 9, 9, 8, 7, 7, 6, 5, 4, 4, 4, 4, 3, 3, 2, 2, 1], [bin[5], x____00005[1], x____00005[21], x____00005[40], x____00005[58], x____00005[75], x____00005[91], x____00005[106], x____00005[120], x____00005[133], x____00005[145], x____00005[156], x____00005[166], x____00005[175], x____00005[183], x____00005[190], x____00005[196], x____00005[201], x____00005[205], x____00005[208], x____00005[210]], 0);
constraint int_lin_le([-10, 10, 10, 10, 10, 9, 9, 8, 7, 7, 6, 5, 4, 4, 4, 4, 3, 3, 2, 2, 1], [bin[6], x____00006[1], x____00006[21], x____00006[40], x____00006[58], x____00006[75], x____00006[91], x____00006[106], x____00006[120], x____00006[133], x____00006[145], x____00006[156], x____00006[166], x____00006[175], x____00006[183], x____00006[190], x____00006[196], x____00006[201], x____00006[205], x____00006[208], x____00006[210]], 0);
constraint int_lin_le([-10, 10, 10, 10, 10, 9, 9, 8, 7, 7, 6, 5, 4, 4, 4, 4, 3, 3, 2, 2, 1], [bin[7], x____00007[1], x____00007[21], x____00007[40], x____00007[58], x____00007[75], x____00007[91], x____00007[106], x____00007[120], x____00007[133], x____00007[145], x____00007[156], x____00007[166], x____00007[175], x____00007[183], x____00007[190], x____00007[196], x____00007[201], x____00007[205], x____00007[208], x____00007[210]], 0);
constraint int_lin_le([-10, 10, 10, 10, 10, 9, 9, 8, 7, 7, 6, 5, 4, 4, 4, 4, 3, 3, 2, 2, 1], [bin[8], x____00008[1], x____00008[21], x____00008[40], x____00008[58], x____00008[75], x____00008[91], x____00008[106], x____00008[120], x____00008[133], x____00008[145], x____00008[156], x____00008[166], x____00008[175], x____00008[183], x____00008[190], x____00008[196], x____00008[201], x____00008[205], x____00008[208], x____00008[210]], 0);
constraint int_lin_le([-10, 10, 10, 10, 10, 9, 9, 8, 7, 7, 6, 5, 4, 4, 4, 4, 3, 3, 2, 2, 1], [bin[9], x____00009[1], x____00009[21], x____00009[40], x____00009[58], x____00009[75], x____00009[91], x____00009[106], x____00009[120], x____00009[133], x____00009[145], x____00009[156], x____00009[166], x____00009[175], x____00009[183], x____00009[190], x____00009[196], x____00009[201], x____00009[205], x____00009[208], x____00009[210]], 0);
constraint int_lin_le([-10, 10, 10, 10, 10, 9, 9, 8, 7, 7, 6, 5, 4, 4, 4, 4, 3, 3, 2, 2, 1], [bin[10], x____00010[1], x____00010[21], x____00010[40], x____00010[58], x____00010[75], x____00010[91], x____00010[106], x____00010[120], x____00010[133], x____00010[145], x____00010[156], x____00010[166], x____00010[175], x____00010[183], x____00010[190], x____00010[196], x____00010[201], x____00010[205], x____00010[208], x____00010[210]], 0);
constraint int_lin_le([-10, 10, 10, 10, 10, 9, 9, 8, 7, 7, 6, 5, 4, 4, 4, 4, 3, 3, 2, 2, 1], [bin[11], x____00011[1], x____00011[21], x____00011[40], x____00011[58], x____00011[75], x____00011[91], x____00011[106], x____00011[120], x____00011[133], x____00011[145], x____00011[156], x____00011[166], x____00011[175], x____00011[183], x____00011[190], x____00011[196], x____00011[201], x____00011[205], x____00011[208], x____00011[210]], 0);
constraint int_lin_le([-10, 10, 10, 10, 10, 9, 9, 8, 7, 7, 6, 5, 4, 4, 4, 4, 3, 3, 2, 2, 1], [bin[12], x____00012[1], x____00012[21], x____00012[40], x____00012[58], x____00012[75], x____00012[91], x____00012[106], x____00012[120], x____00012[133], x____00012[145], x____00012[156], x____00012[166], x____00012[175], x____00012[183], x____00012[190], x____00012[196], x____00012[201], x____00012[205], x____00012[208], x____00012[210]], 0);
constraint int_lin_le([-10, 10, 10, 10, 10, 9, 9, 8, 7, 7, 6, 5, 4, 4, 4, 4, 3, 3, 2, 2, 1], [bin[13], x____00013[1], x____00013[21], x____00013[40], x____00013[58], x____00013[75], x____00013[91], x____00013[106], x____00013[120], x____00013[133], x____00013[145], x____00013[156], x____00013[166], x____00013[175], x____00013[183], x____00013[190], x____00013[196], x____00013[201], x____00013[205], x____00013[208], x____00013[210]], 0);
constraint int_lin_le([-10, 10, 10, 10, 10, 9, 9, 8, 7, 7, 6, 5, 4, 4, 4, 4, 3, 3, 2, 2, 1], [bin[14], x____00014[1], x____00014[21], x____00014[40], x____00014[58], x____00014[75], x____00014[91], x____00014[106], x____00014[120], x____00014[133], x____00014[145], x____00014[156], x____00014[166], x____00014[175], x____00014[183], x____00014[190], x____00014[196], x____00014[201], x____00014[205], x____00014[208], x____00014[210]], 0);
constraint int_lin_le([-10, 10, 10, 10, 10, 9, 9, 8, 7, 7, 6, 5, 4, 4, 4, 4, 3, 3, 2, 2, 1], [bin[15], x____00015[1], x____00015[21], x____00015[40], x____00015[58], x____00015[75], x____00015[91], x____00015[106], x____00015[120], x____00015[133], x____00015[145], x____00015[156], x____00015[166], x____00015[175], x____00015[183], x____00015[190], x____00015[196], x____00015[201], x____00015[205], x____00015[208], x____00015[210]], 0);
constraint int_lin_le([-10, 10, 10, 10, 10, 9, 9, 8, 7, 7, 6, 5, 4, 4, 4, 4, 3, 3, 2, 2, 1], [bin[16], x____00016[1], x____00016[21], x____00016[40], x____00016[58], x____00016[75], x____00016[91], x____00016[106], x____00016[120], x____00016[133], x____00016[145], x____00016[156], x____00016[166], x____00016[175], x____00016[183], x____00016[190], x____00016[196], x____00016[201], x____00016[205], x____00016[208], x____00016[210]], 0);
constraint int_lin_le([-10, 10, 10, 10, 10, 9, 9, 8, 7, 7, 6, 5, 4, 4, 4, 4, 3, 3, 2, 2, 1], [bin[17], x____00017[1], x____00017[21], x____00017[40], x____00017[58], x____00017[75], x____00017[91], x____00017[106], x____00017[120], x____00017[133], x____00017[145], x____00017[156], x____00017[166], x____00017[175], x____00017[183], x____00017[190], x____00017[196], x____00017[201], x____00017[205], x____00017[208], x____00017[210]], 0);
constraint int_lin_le([-10, 10, 10, 10, 10, 9, 9, 8, 7, 7, 6, 5, 4, 4, 4, 4, 3, 3, 2, 2, 1], [bin[18], x____00018[1], x____00018[21], x____00018[40], x____00018[58], x____00018[75], x____00018[91], x____00018[106], x____00018[120], x____00018[133], x____00018[145], x____00018[156], x____00018[166], x____00018[175], x____00018[183], x____00018[190], x____00018[196], x____00018[201], x____00018[205], x____00018[208], x____00018[210]], 0);
constraint int_lin_le([-10, 10, 10, 10, 10, 9, 9, 8, 7, 7, 6, 5, 4, 4, 4, 4, 3, 3, 2, 2, 1], [bin[19], x____00019[1], x____00019[21], x____00019[40], x____00019[58], x____00019[75], x____00019[91], x____00019[106], x____00019[120], x____00019[133], x____00019[145], x____00019[156], x____00019[166], x____00019[175], x____00019[183], x____00019[190], x____00019[196], x____00019[201], x____00019[205], x____00019[208], x____00019[210]], 0);
constraint int_lin_le([-10, 10, 10, 10, 10, 9, 9, 8, 7, 7, 6, 5, 4, 4, 4, 4, 3, 3, 2, 2, 1], [bin[20], x____00020[1], x____00020[21], x____00020[40], x____00020[58], x____00020[75], x____00020[91], x____00020[106], x____00020[120], x____00020[133], x____00020[145], x____00020[156], x____00020[166], x____00020[175], x____00020[183], x____00020[190], x____00020[196], x____00020[201], x____00020[205], x____00020[208], x____00020[210]], 0);
solve minimize INT____00021;
