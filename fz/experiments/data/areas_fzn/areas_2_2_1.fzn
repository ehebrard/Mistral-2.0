array [1..4] of int: puzzle = [1, 0, 0, 0];
array [1..1] of int: region_size = [4];
var bool: BOOL____00001 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00003 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00005 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00007 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00009 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00010 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00011 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00012 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00013 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00014 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00015 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00016 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00017 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00018 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00019 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00020 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00022 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00023 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00024 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00025 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00026 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00027 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00002 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00004 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00006 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00008 :: is_defined_var :: var_is_introduced;
array [1..4] of var 1..1: grid :: output_array([1..2, 1..2]);
array [1..4] of var 1..4: when;
constraint array_bool_and([BOOL____00009, BOOL____00010], BOOL____00013) :: defines_var(BOOL____00013);
constraint array_bool_and([BOOL____00011, BOOL____00012], BOOL____00014) :: defines_var(BOOL____00014);
constraint array_bool_and([BOOL____00015, BOOL____00016], BOOL____00019) :: defines_var(BOOL____00019);
constraint array_bool_and([BOOL____00017, BOOL____00018], BOOL____00020) :: defines_var(BOOL____00020);
constraint array_bool_and([BOOL____00022, BOOL____00023], BOOL____00026) :: defines_var(BOOL____00026);
constraint array_bool_and([BOOL____00024, BOOL____00025], BOOL____00027) :: defines_var(BOOL____00027);
constraint array_bool_or([BOOL____00013, BOOL____00014], true);
constraint array_bool_or([BOOL____00019, BOOL____00020], true);
constraint array_bool_or([BOOL____00026, BOOL____00027], true);
constraint bool2int(BOOL____00001, INT____00002) :: defines_var(INT____00002);
constraint bool2int(BOOL____00003, INT____00004) :: defines_var(INT____00004);
constraint bool2int(BOOL____00005, INT____00006) :: defines_var(INT____00006);
constraint bool2int(BOOL____00007, INT____00008) :: defines_var(INT____00008);
constraint int_eq(grid[1], 1);
constraint int_eq(when[1], 1);
constraint int_eq_reif(grid[1], 1, BOOL____00001) :: defines_var(BOOL____00001);
constraint int_eq_reif(grid[2], 1, BOOL____00003) :: defines_var(BOOL____00003);
constraint int_eq_reif(grid[2], grid[1], BOOL____00011) :: defines_var(BOOL____00011);
constraint int_eq_reif(grid[2], grid[4], BOOL____00009) :: defines_var(BOOL____00009);
constraint int_eq_reif(grid[3], 1, BOOL____00005) :: defines_var(BOOL____00005);
constraint int_eq_reif(grid[3], grid[1], BOOL____00015) :: defines_var(BOOL____00015);
constraint int_eq_reif(grid[3], grid[4], BOOL____00017) :: defines_var(BOOL____00017);
constraint int_eq_reif(grid[4], 1, BOOL____00007) :: defines_var(BOOL____00007);
constraint int_eq_reif(grid[4], grid[2], BOOL____00022) :: defines_var(BOOL____00022);
constraint int_eq_reif(grid[4], grid[3], BOOL____00024) :: defines_var(BOOL____00024);
constraint int_lin_eq([1, 1, 1, 1], [INT____00002, INT____00004, INT____00006, INT____00008], 4);
constraint int_lin_eq_reif([-1, 1], [when[1], when[2]], 1, BOOL____00012) :: defines_var(BOOL____00012);
constraint int_lin_eq_reif([-1, 1], [when[1], when[3]], 1, BOOL____00016) :: defines_var(BOOL____00016);
constraint int_lin_eq_reif([-1, 1], [when[2], when[4]], 1, BOOL____00023) :: defines_var(BOOL____00023);
constraint int_lin_eq_reif([-1, 1], [when[3], when[4]], 1, BOOL____00025) :: defines_var(BOOL____00025);
constraint int_lin_eq_reif([1, -1], [when[2], when[4]], 1, BOOL____00010) :: defines_var(BOOL____00010);
constraint int_lin_eq_reif([1, -1], [when[3], when[4]], 1, BOOL____00018) :: defines_var(BOOL____00018);
solve  :: int_search([grid[1], grid[2], grid[3], grid[4]], first_fail, indomain_split, complete) satisfy;
